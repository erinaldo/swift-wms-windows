//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MobilityScm.Modelo.OnePlanServices_Trans {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OnePlanServices_Trans.WMS_TransSoap")]
    public interface WMS_TransSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterOccupancy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyResponse RegisterOccupancy(MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterOccupancy", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyResponse> RegisterOccupancyAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetReceptionAuditSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryResponse SetReceptionAuditSummary(MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetReceptionAuditSummary", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryResponse> SetReceptionAuditSummaryAsync(MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetTransWeigth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthResponse SetTransWeigth(MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetTransWeigth", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthResponse> SetTransWeigthAsync(MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditCountResponse AuditCount(MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditCount", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditCountResponse> AuditCountAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditStartCounting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingResponse AuditStartCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditStartCounting", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingResponse> AuditStartCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditFinishCounting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingResponse AuditFinishCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditFinishCounting", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingResponse> AuditFinishCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LicenseReAlloc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocResponse LicenseReAlloc(MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LicenseReAlloc", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocResponse> LicenseReAllocAsync(MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditResetCounting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingResponse AuditResetCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuditResetCounting", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingResponse> AuditResetCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AllocLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseResponse AllocLicense(MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AllocLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseResponse> AllocLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransResponse RegisterTrans(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransResponse> RegisterTransAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateTypeChangeXLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseResponse CreateTypeChangeXLicense(MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateTypeChangeXLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseResponse> CreateTypeChangeXLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateStatusQuotaLetter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterResponse UpdateStatusQuotaLetter(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateStatusQuotaLetter", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterResponse> UpdateStatusQuotaLetterAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateAcuseRecibo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboResponse CreateAcuseRecibo(MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateAcuseRecibo", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboResponse> CreateAcuseReciboAsync(MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateStatusSapService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceResponse UpdateStatusSapService(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateStatusSapService", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceResponse> UpdateStatusSapServiceAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarEstadoTareaDeRecepcion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionResponse ActualizarEstadoTareaDeRecepcion(MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarEstadoTareaDeRecepcion", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionResponse> ActualizarEstadoTareaDeRecepcionAsync(MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RollBackALicencia", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaResponse RollBackALicencia(MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RollBackALicencia", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaResponse> RollBackALicenciaAsync(MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExplodeMasterPack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackResponse ExplodeMasterPack(MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExplodeMasterPack", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackResponse> ExplodeMasterPackAsync(MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMasterPackByLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseResponse GetMasterPackByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMasterPackByLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseResponse> GetMasterPackByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDetailMasterPackByLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseResponse GetDetailMasterPackByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDetailMasterPackByLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseResponse> GetDetailMasterPackByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLocationTargerTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskResponse UpdateLocationTargerTask(MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLocationTargerTask", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskResponse> UpdateLocationTargerTaskAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CancelPickingDetailLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineResponse CancelPickingDetailLine(MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CancelPickingDetailLine", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineResponse> CancelPickingDetailLineAsync(MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTransReallocForReplenishment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentResponse RegisterTransReallocForReplenishment(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTransReallocForReplenishment", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentResponse> RegisterTransReallocForReplenishmentAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTransRelocateForNoImmediatePicking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingResponse RegisterTransRelocateForNoImmediatePicking(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterTransRelocateForNoImmediatePicking", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingResponse> RegisterTransRelocateForNoImmediatePickingAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateScannedSerialNumberToProcess", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessResponse UpdateScannedSerialNumberToProcess(MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateScannedSerialNumberToProcess", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessResponse> UpdateScannedSerialNumberToProcessAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSetActiveSerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberResponse UpdateSetActiveSerialNumber(MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSetActiveSerialNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberResponse> UpdateSetActiveSerialNumberAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRequestedSerialNumberDiscretionalPickingByLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseResponse GetRequestedSerialNumberDiscretionalPickingByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRequestedSerialNumberDiscretionalPickingByLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseResponse> GetRequestedSerialNumberDiscretionalPickingByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RollbackSerialNumbersOnProcess", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessResponse RollbackSerialNumbersOnProcess(MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RollbackSerialNumbersOnProcess", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessResponse> RollbackSerialNumbersOnProcessAsync(MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateScannedReceptionDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentResponse ValidateScannedReceptionDocument(MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateScannedReceptionDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentResponse> ValidateScannedReceptionDocumentAsync(MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProcessScannedDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentResponse ProcessScannedDocument(MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProcessScannedDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentResponse> ProcessScannedDocumentAsync(MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPickingLabel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelResponse InsertPickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPickingLabel", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelResponse> InsertPickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePickingLabel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelResponse UpdatePickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePickingLabel", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelResponse> UpdatePickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePickingLabel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelResponse DeletePickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePickingLabel", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelResponse> DeletePickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateIfPickingLicenseIsAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableResponse ValidateIfPickingLicenseIsAvailable(MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateIfPickingLicenseIsAvailable", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableResponse> ValidateIfPickingLicenseIsAvailableAsync(MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerMaterialesEnUnbicacionParaUnificar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarResponse ObtenerMaterialesEnUnbicacionParaUnificar(MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerMaterialesEnUnbicacionParaUnificar", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarResponse> ObtenerMaterialesEnUnbicacionParaUnificarAsync(MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UnificarLicenciasPorUbicacionYMaterial", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialResponse UnificarLicenciasPorUbicacionYMaterial(MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UnificarLicenciasPorUbicacionYMaterial", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialResponse> UnificarLicenciasPorUbicacionYMaterialAsync(MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDeliveryNoteERP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPResponse UpdateDeliveryNoteERP(MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDeliveryNoteERP", ReplyAction="*")]
        System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPResponse> UpdateDeliveryNoteERPAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterOccupancy", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterOccupancyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pSOURCE_LOCATION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public double pOCCUPANCY_LEVEL;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public RegisterOccupancyRequest() {
        }
        
        public RegisterOccupancyRequest(string pSOURCE_LOCATION, string pLOGIN_ID, double pOCCUPANCY_LEVEL, string pResult, string pEnvironmentName) {
            this.pSOURCE_LOCATION = pSOURCE_LOCATION;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pOCCUPANCY_LEVEL = pOCCUPANCY_LEVEL;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterOccupancyResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterOccupancyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterOccupancyResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public RegisterOccupancyResponse() {
        }
        
        public RegisterOccupancyResponse(bool RegisterOccupancyResult, string pResult) {
            this.RegisterOccupancyResult = RegisterOccupancyResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetReceptionAuditSummary", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SetReceptionAuditSummaryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pCODIGO_POLIZA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public double pQTY1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public double pQTY2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public double pQTY3;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public double pQTY4;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string pEnvironmentName;
        
        public SetReceptionAuditSummaryRequest() {
        }
        
        public SetReceptionAuditSummaryRequest(string pCODIGO_POLIZA, double pQTY1, double pQTY2, double pQTY3, double pQTY4, string pLOGIN_ID, string pResult, string pEnvironmentName) {
            this.pCODIGO_POLIZA = pCODIGO_POLIZA;
            this.pQTY1 = pQTY1;
            this.pQTY2 = pQTY2;
            this.pQTY3 = pQTY3;
            this.pQTY4 = pQTY4;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetReceptionAuditSummaryResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SetReceptionAuditSummaryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool SetReceptionAuditSummaryResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public SetReceptionAuditSummaryResponse() {
        }
        
        public SetReceptionAuditSummaryResponse(bool SetReceptionAuditSummaryResult, string pResult) {
            this.SetReceptionAuditSummaryResult = SetReceptionAuditSummaryResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetTransWeigth", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SetTransWeigthRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pSERIAL_NUMBER;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public double pWEIGTH;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public SetTransWeigthRequest() {
        }
        
        public SetTransWeigthRequest(int pSERIAL_NUMBER, double pWEIGTH, string pLOGIN_ID, string pResult, string pEnvironmentName) {
            this.pSERIAL_NUMBER = pSERIAL_NUMBER;
            this.pWEIGTH = pWEIGTH;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetTransWeigthResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SetTransWeigthResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool SetTransWeigthResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public SetTransWeigthResponse() {
        }
        
        public SetTransWeigthResponse(bool SetTransWeigthResult, string pResult) {
            this.SetTransWeigthResult = SetTransWeigthResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditCount", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditCountRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pAUDIT_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pMETHOD;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pCODIGO_POLIZA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pBARCODE_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int pQTY_INPUTED;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pSERIAL_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string pOPTION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string pBatch;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public System.DateTime pDateExpirtacion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public string pEnvironmentName;
        
        public AuditCountRequest() {
        }
        
        public AuditCountRequest(int pAUDIT_ID, string pMETHOD, string pCODIGO_POLIZA, string pBARCODE_ID, int pQTY_INPUTED, string pSERIAL_ID, string pLOGIN_ID, string pOPTION, string pBatch, System.DateTime pDateExpirtacion, string pResult, string pEnvironmentName) {
            this.pAUDIT_ID = pAUDIT_ID;
            this.pMETHOD = pMETHOD;
            this.pCODIGO_POLIZA = pCODIGO_POLIZA;
            this.pBARCODE_ID = pBARCODE_ID;
            this.pQTY_INPUTED = pQTY_INPUTED;
            this.pSERIAL_ID = pSERIAL_ID;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pOPTION = pOPTION;
            this.pBatch = pBatch;
            this.pDateExpirtacion = pDateExpirtacion;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditCountResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditCountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AuditCountResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public AuditCountResponse() {
        }
        
        public AuditCountResponse(bool AuditCountResult, string pResult) {
            this.AuditCountResult = AuditCountResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditStartCounting", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditStartCountingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pCODIGO_POLIZA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pCONTENEDOR;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pMETHOD;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int pCREATED_AUDIT_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pOPTION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string pEnvironmentName;
        
        public AuditStartCountingRequest() {
        }
        
        public AuditStartCountingRequest(string pLOGIN_ID, string pCODIGO_POLIZA, string pCONTENEDOR, string pMETHOD, int pCREATED_AUDIT_ID, string pOPTION, string pResult, string pEnvironmentName) {
            this.pLOGIN_ID = pLOGIN_ID;
            this.pCODIGO_POLIZA = pCODIGO_POLIZA;
            this.pCONTENEDOR = pCONTENEDOR;
            this.pMETHOD = pMETHOD;
            this.pCREATED_AUDIT_ID = pCREATED_AUDIT_ID;
            this.pOPTION = pOPTION;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditStartCountingResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditStartCountingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AuditStartCountingResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int pCREATED_AUDIT_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        public AuditStartCountingResponse() {
        }
        
        public AuditStartCountingResponse(bool AuditStartCountingResult, int pCREATED_AUDIT_ID, string pResult) {
            this.AuditStartCountingResult = AuditStartCountingResult;
            this.pCREATED_AUDIT_ID = pCREATED_AUDIT_ID;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditFinishCounting", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditFinishCountingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pAUDIT_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pOPTION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public AuditFinishCountingRequest() {
        }
        
        public AuditFinishCountingRequest(int pAUDIT_ID, string pLOGIN_ID, string pOPTION, string pResult, string pEnvironmentName) {
            this.pAUDIT_ID = pAUDIT_ID;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pOPTION = pOPTION;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditFinishCountingResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditFinishCountingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AuditFinishCountingResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public AuditFinishCountingResponse() {
        }
        
        public AuditFinishCountingResponse(bool AuditFinishCountingResult, string pResult) {
            this.AuditFinishCountingResult = AuditFinishCountingResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LicenseReAlloc", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LicenseReAllocRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pLICENSE_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pNEW_LOCATION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public decimal pMt2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string paramName;
        
        public LicenseReAllocRequest() {
        }
        
        public LicenseReAllocRequest(int pLICENSE_ID, string pNEW_LOCATION, string pLOGIN_ID, decimal pMt2, string pResult, string pEnvironmentName, string paramName) {
            this.pLICENSE_ID = pLICENSE_ID;
            this.pNEW_LOCATION = pNEW_LOCATION;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pMt2 = pMt2;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
            this.paramName = paramName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LicenseReAllocResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LicenseReAllocResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LicenseReAllocResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public LicenseReAllocResponse() {
        }
        
        public LicenseReAllocResponse(bool LicenseReAllocResult, string pResult) {
            this.LicenseReAllocResult = LicenseReAllocResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditResetCounting", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditResetCountingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pAUDIT_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pBARCODE_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pOPTION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public AuditResetCountingRequest() {
        }
        
        public AuditResetCountingRequest(int pAUDIT_ID, string pBARCODE_ID, string pOPTION, string pResult, string pEnvironmentName) {
            this.pAUDIT_ID = pAUDIT_ID;
            this.pBARCODE_ID = pBARCODE_ID;
            this.pOPTION = pOPTION;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuditResetCountingResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AuditResetCountingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AuditResetCountingResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public AuditResetCountingResponse() {
        }
        
        public AuditResetCountingResponse(bool AuditResetCountingResult, string pResult) {
            this.AuditResetCountingResult = AuditResetCountingResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AllocLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AllocLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pLicenseID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pTargetLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pLoginID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public AllocLicenseRequest() {
        }
        
        public AllocLicenseRequest(int pLicenseID, string pTargetLocation, string pLoginID, string pResult, string pEnvironmentName) {
            this.pLicenseID = pLicenseID;
            this.pTargetLocation = pTargetLocation;
            this.pLoginID = pLoginID;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AllocLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AllocLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool AllocLicenseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public AllocLicenseResponse() {
        }
        
        public AllocLicenseResponse(bool AllocLicenseResult, string pResult) {
            this.AllocLicenseResult = AllocLicenseResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTrans", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pTRADE_AGREEMENT;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pLOGIN_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pTRANS_TYPE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pTRANS_EXTRA_COMMENTS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pMATERIAL_BARCODE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pMATERIAL_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int pSOURCE_LICENSE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public int pTARGET_LICENSE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string pSOURCE_LOCATION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string pTARGET_LOCATION;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string pCLIENT_OWNER;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public double pQUANTITY_UNITS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string pSOURCE_WAREHOUSE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public string pTARGET_WAREHOUSE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=14)]
        public string pTRANS_SUBTYPE;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=15)]
        public string pCODIGO_POLIZA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=16)]
        public int pLICENSE_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=17)]
        public string pSTATUS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=18)]
        public int pWAVE_PICKING_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=19)]
        public int pSERIAL_NUMBER;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=20)]
        public decimal pTransMT2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=21)]
        public string pTipoUbicacion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=22)]
        public decimal pMt2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=23)]
        public string pVin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=24)]
        public string pTask_Id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=25)]
        public string pSerial;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=26)]
        public string pLote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=27)]
        public System.DateTime pFechaLote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=28)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=29)]
        public string pEnvironmentName;
        
        public RegisterTransRequest() {
        }
        
        public RegisterTransRequest(
                    string pTRADE_AGREEMENT, 
                    string pLOGIN_ID, 
                    string pTRANS_TYPE, 
                    string pTRANS_EXTRA_COMMENTS, 
                    string pMATERIAL_BARCODE, 
                    string pMATERIAL_ID, 
                    int pSOURCE_LICENSE, 
                    int pTARGET_LICENSE, 
                    string pSOURCE_LOCATION, 
                    string pTARGET_LOCATION, 
                    string pCLIENT_OWNER, 
                    double pQUANTITY_UNITS, 
                    string pSOURCE_WAREHOUSE, 
                    string pTARGET_WAREHOUSE, 
                    string pTRANS_SUBTYPE, 
                    string pCODIGO_POLIZA, 
                    int pLICENSE_ID, 
                    string pSTATUS, 
                    int pWAVE_PICKING_ID, 
                    int pSERIAL_NUMBER, 
                    decimal pTransMT2, 
                    string pTipoUbicacion, 
                    decimal pMt2, 
                    string pVin, 
                    string pTask_Id, 
                    string pSerial, 
                    string pLote, 
                    System.DateTime pFechaLote, 
                    string pResult, 
                    string pEnvironmentName) {
            this.pTRADE_AGREEMENT = pTRADE_AGREEMENT;
            this.pLOGIN_ID = pLOGIN_ID;
            this.pTRANS_TYPE = pTRANS_TYPE;
            this.pTRANS_EXTRA_COMMENTS = pTRANS_EXTRA_COMMENTS;
            this.pMATERIAL_BARCODE = pMATERIAL_BARCODE;
            this.pMATERIAL_ID = pMATERIAL_ID;
            this.pSOURCE_LICENSE = pSOURCE_LICENSE;
            this.pTARGET_LICENSE = pTARGET_LICENSE;
            this.pSOURCE_LOCATION = pSOURCE_LOCATION;
            this.pTARGET_LOCATION = pTARGET_LOCATION;
            this.pCLIENT_OWNER = pCLIENT_OWNER;
            this.pQUANTITY_UNITS = pQUANTITY_UNITS;
            this.pSOURCE_WAREHOUSE = pSOURCE_WAREHOUSE;
            this.pTARGET_WAREHOUSE = pTARGET_WAREHOUSE;
            this.pTRANS_SUBTYPE = pTRANS_SUBTYPE;
            this.pCODIGO_POLIZA = pCODIGO_POLIZA;
            this.pLICENSE_ID = pLICENSE_ID;
            this.pSTATUS = pSTATUS;
            this.pWAVE_PICKING_ID = pWAVE_PICKING_ID;
            this.pSERIAL_NUMBER = pSERIAL_NUMBER;
            this.pTransMT2 = pTransMT2;
            this.pTipoUbicacion = pTipoUbicacion;
            this.pMt2 = pMt2;
            this.pVin = pVin;
            this.pTask_Id = pTask_Id;
            this.pSerial = pSerial;
            this.pLote = pLote;
            this.pFechaLote = pFechaLote;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTransResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterTransResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pCODIGO_POLIZA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        public RegisterTransResponse() {
        }
        
        public RegisterTransResponse(bool RegisterTransResult, string pCODIGO_POLIZA, string pResult) {
            this.RegisterTransResult = RegisterTransResult;
            this.pCODIGO_POLIZA = pCODIGO_POLIZA;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateTypeChangeXLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateTypeChangeXLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pLicenseID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int pTypeCharge;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int pQty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pLastUpdatedBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pTypeTrans;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pEnvironmentName;
        
        public CreateTypeChangeXLicenseRequest() {
        }
        
        public CreateTypeChangeXLicenseRequest(int pLicenseID, int pTypeCharge, int pQty, string pLastUpdatedBy, string pTypeTrans, string pResult, string pEnvironmentName) {
            this.pLicenseID = pLicenseID;
            this.pTypeCharge = pTypeCharge;
            this.pQty = pQty;
            this.pLastUpdatedBy = pLastUpdatedBy;
            this.pTypeTrans = pTypeTrans;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateTypeChangeXLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateTypeChangeXLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CreateTypeChangeXLicenseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public CreateTypeChangeXLicenseResponse() {
        }
        
        public CreateTypeChangeXLicenseResponse(bool CreateTypeChangeXLicenseResult, string pResult) {
            this.CreateTypeChangeXLicenseResult = CreateTypeChangeXLicenseResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateStatusQuotaLetter", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateStatusQuotaLetterRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pDocId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pUserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public UpdateStatusQuotaLetterRequest() {
        }
        
        public UpdateStatusQuotaLetterRequest(int pDocId, string pStatus, string pUserId, string pResult, string pEnvironmentName) {
            this.pDocId = pDocId;
            this.pStatus = pStatus;
            this.pUserId = pUserId;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateStatusQuotaLetterResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateStatusQuotaLetterResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdateStatusQuotaLetterResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public UpdateStatusQuotaLetterResponse() {
        }
        
        public UpdateStatusQuotaLetterResponse(bool UpdateStatusQuotaLetterResult, string pResult) {
            this.UpdateStatusQuotaLetterResult = UpdateStatusQuotaLetterResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateAcuseRecibo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateAcuseReciboRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pPoliza;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pFob;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.DateTime pDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pCodigoTransportista;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pPlacaTransportista;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pNumeroContenedor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pNumeroMarchamo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string pUserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pFoto1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pFoto2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pFoto3;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public string pStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public string pEnvironmentName;
        
        public CreateAcuseReciboRequest() {
        }
        
        public CreateAcuseReciboRequest(string pPoliza, string pFob, System.DateTime pDate, string pCodigoTransportista, string pPlacaTransportista, string pNumeroContenedor, string pNumeroMarchamo, string pUserId, byte[] pFoto1, byte[] pFoto2, byte[] pFoto3, string pStatus, string pResult, string pEnvironmentName) {
            this.pPoliza = pPoliza;
            this.pFob = pFob;
            this.pDate = pDate;
            this.pCodigoTransportista = pCodigoTransportista;
            this.pPlacaTransportista = pPlacaTransportista;
            this.pNumeroContenedor = pNumeroContenedor;
            this.pNumeroMarchamo = pNumeroMarchamo;
            this.pUserId = pUserId;
            this.pFoto1 = pFoto1;
            this.pFoto2 = pFoto2;
            this.pFoto3 = pFoto3;
            this.pStatus = pStatus;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateAcuseReciboResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateAcuseReciboResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CreateAcuseReciboResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public CreateAcuseReciboResponse() {
        }
        
        public CreateAcuseReciboResponse(bool CreateAcuseReciboResult, string pResult) {
            this.CreateAcuseReciboResult = CreateAcuseReciboResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateStatusSapService", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateStatusSapServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int pDocId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pEnvironmentName;
        
        public UpdateStatusSapServiceRequest() {
        }
        
        public UpdateStatusSapServiceRequest(int pDocId, string pStatus, string pResult, string pEnvironmentName) {
            this.pDocId = pDocId;
            this.pStatus = pStatus;
            this.pResult = pResult;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateStatusSapServiceResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateStatusSapServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdateStatusSapServiceResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public UpdateStatusSapServiceResponse() {
        }
        
        public UpdateStatusSapServiceResponse(bool UpdateStatusSapServiceResult, string pResult) {
            this.UpdateStatusSapServiceResult = UpdateStatusSapServiceResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ActualizarEstadoTareaDeRecepcion", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ActualizarEstadoTareaDeRecepcionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CodigoPoliza;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string LogIn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string Regimen;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string Estatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int TaskId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pResult;
        
        public ActualizarEstadoTareaDeRecepcionRequest() {
        }
        
        public ActualizarEstadoTareaDeRecepcionRequest(string CodigoPoliza, string LogIn, string Regimen, string Estatus, int TaskId, string pEnvironmentName, string pResult) {
            this.CodigoPoliza = CodigoPoliza;
            this.LogIn = LogIn;
            this.Regimen = Regimen;
            this.Estatus = Estatus;
            this.TaskId = TaskId;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ActualizarEstadoTareaDeRecepcionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ActualizarEstadoTareaDeRecepcionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ActualizarEstadoTareaDeRecepcionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public ActualizarEstadoTareaDeRecepcionResponse() {
        }
        
        public ActualizarEstadoTareaDeRecepcionResponse(bool ActualizarEstadoTareaDeRecepcionResult, string pResult) {
            this.ActualizarEstadoTareaDeRecepcionResult = ActualizarEstadoTareaDeRecepcionResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RollBackALicencia", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RollBackALicenciaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int LicenceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        public RollBackALicenciaRequest() {
        }
        
        public RollBackALicenciaRequest(int LicenceId, string pEnvironmentName, string pResult) {
            this.LicenceId = LicenceId;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RollBackALicenciaResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RollBackALicenciaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RollBackALicenciaResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public RollBackALicenciaResponse() {
        }
        
        public RollBackALicenciaResponse(bool RollBackALicenciaResult, string pResult) {
            this.RollBackALicenciaResult = RollBackALicenciaResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExplodeMasterPack", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExplodeMasterPackRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int LicenceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string MaterialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string LastUpdateBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pResult;
        
        public ExplodeMasterPackRequest() {
        }
        
        public ExplodeMasterPackRequest(int LicenceId, string MaterialId, string LastUpdateBy, string pEnvironmentName, string pResult) {
            this.LicenceId = LicenceId;
            this.MaterialId = MaterialId;
            this.LastUpdateBy = LastUpdateBy;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExplodeMasterPackResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExplodeMasterPackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ExplodeMasterPackResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public ExplodeMasterPackResponse() {
        }
        
        public ExplodeMasterPackResponse(bool ExplodeMasterPackResult, string pResult) {
            this.ExplodeMasterPackResult = ExplodeMasterPackResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMasterPackByLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMasterPackByLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int licenceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string MaterialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        public GetMasterPackByLicenseRequest() {
        }
        
        public GetMasterPackByLicenseRequest(int licenceId, string MaterialId, string pEnvironmentName, string pResult) {
            this.licenceId = licenceId;
            this.MaterialId = MaterialId;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMasterPackByLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMasterPackByLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable GetMasterPackByLicenseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public GetMasterPackByLicenseResponse() {
        }
        
        public GetMasterPackByLicenseResponse(System.Data.DataTable GetMasterPackByLicenseResult, string pResult) {
            this.GetMasterPackByLicenseResult = GetMasterPackByLicenseResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDetailMasterPackByLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetDetailMasterPackByLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int licenceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        public GetDetailMasterPackByLicenseRequest() {
        }
        
        public GetDetailMasterPackByLicenseRequest(int licenceId, string materialId, string pEnvironmentName, string pResult) {
            this.licenceId = licenceId;
            this.materialId = materialId;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDetailMasterPackByLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetDetailMasterPackByLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable GetDetailMasterPackByLicenseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public GetDetailMasterPackByLicenseResponse() {
        }
        
        public GetDetailMasterPackByLicenseResponse(System.Data.DataTable GetDetailMasterPackByLicenseResult, string pResult) {
            this.GetDetailMasterPackByLicenseResult = GetDetailMasterPackByLicenseResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateLocationTargerTask", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateLocationTargerTaskRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int wevePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string locationSpotTarget;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pResult;
        
        public UpdateLocationTargerTaskRequest() {
        }
        
        public UpdateLocationTargerTaskRequest(int wevePickingId, string login, string locationSpotTarget, string pEnvironmentName, string pResult) {
            this.wevePickingId = wevePickingId;
            this.login = login;
            this.locationSpotTarget = locationSpotTarget;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateLocationTargerTaskResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateLocationTargerTaskResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdateLocationTargerTaskResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public UpdateLocationTargerTaskResponse() {
        }
        
        public UpdateLocationTargerTaskResponse(bool UpdateLocationTargerTaskResult, string pResult) {
            this.UpdateLocationTargerTaskResult = UpdateLocationTargerTaskResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CancelPickingDetailLine", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CancelPickingDetailLineRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pResult;
        
        public CancelPickingDetailLineRequest() {
        }
        
        public CancelPickingDetailLineRequest(int wavePickingId, string login, string materialId, string pEnvironmentName, string pResult) {
            this.wavePickingId = wavePickingId;
            this.login = login;
            this.materialId = materialId;
            this.pEnvironmentName = pEnvironmentName;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CancelPickingDetailLineResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CancelPickingDetailLineResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CancelPickingDetailLineResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public CancelPickingDetailLineResponse() {
        }
        
        public CancelPickingDetailLineResponse(bool CancelPickingDetailLineResult, string pResult) {
            this.CancelPickingDetailLineResult = CancelPickingDetailLineResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTransReallocForReplenishment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransReallocForReplenishmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialBarcode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int sourceLicence;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string sourceLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public decimal qty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public decimal mt2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string typeLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string targetLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string pEnvironmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public int newLiceceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string pResult;
        
        public RegisterTransReallocForReplenishmentRequest() {
        }
        
        public RegisterTransReallocForReplenishmentRequest(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string pEnvironmentName, int newLiceceId, string pResult) {
            this.login = login;
            this.materialId = materialId;
            this.materialBarcode = materialBarcode;
            this.sourceLicence = sourceLicence;
            this.sourceLocation = sourceLocation;
            this.qty = qty;
            this.wavePickingId = wavePickingId;
            this.mt2 = mt2;
            this.typeLocation = typeLocation;
            this.targetLocation = targetLocation;
            this.pEnvironmentName = pEnvironmentName;
            this.newLiceceId = newLiceceId;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTransReallocForReplenishmentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransReallocForReplenishmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterTransReallocForReplenishmentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int newLiceceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        public RegisterTransReallocForReplenishmentResponse() {
        }
        
        public RegisterTransReallocForReplenishmentResponse(bool RegisterTransReallocForReplenishmentResult, int newLiceceId, string pResult) {
            this.RegisterTransReallocForReplenishmentResult = RegisterTransReallocForReplenishmentResult;
            this.newLiceceId = newLiceceId;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTransRelocateForNoImmediatePicking", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransRelocateForNoImmediatePickingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialBarcode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int sourceLicence;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string sourceLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public decimal qty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public decimal mt2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string typeLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string targetLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public int newLicenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string result;
        
        public RegisterTransRelocateForNoImmediatePickingRequest() {
        }
        
        public RegisterTransRelocateForNoImmediatePickingRequest(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string environmentName, int newLicenseId, string result) {
            this.login = login;
            this.materialId = materialId;
            this.materialBarcode = materialBarcode;
            this.sourceLicence = sourceLicence;
            this.sourceLocation = sourceLocation;
            this.qty = qty;
            this.wavePickingId = wavePickingId;
            this.mt2 = mt2;
            this.typeLocation = typeLocation;
            this.targetLocation = targetLocation;
            this.environmentName = environmentName;
            this.newLicenseId = newLicenseId;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterTransRelocateForNoImmediatePickingResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterTransRelocateForNoImmediatePickingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterTransRelocateForNoImmediatePickingResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int newLicenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string result;
        
        public RegisterTransRelocateForNoImmediatePickingResponse() {
        }
        
        public RegisterTransRelocateForNoImmediatePickingResponse(bool RegisterTransRelocateForNoImmediatePickingResult, int newLicenseId, string result) {
            this.RegisterTransRelocateForNoImmediatePickingResult = RegisterTransRelocateForNoImmediatePickingResult;
            this.newLicenseId = newLicenseId;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateScannedSerialNumberToProcess", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateScannedSerialNumberToProcessRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string serialNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string taskType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string result;
        
        public UpdateScannedSerialNumberToProcessRequest() {
        }
        
        public UpdateScannedSerialNumberToProcessRequest(string serialNumber, int licenseId, int wavePickingId, string materialId, string login, string taskType, string environmentName, string result) {
            this.serialNumber = serialNumber;
            this.licenseId = licenseId;
            this.wavePickingId = wavePickingId;
            this.materialId = materialId;
            this.login = login;
            this.taskType = taskType;
            this.environmentName = environmentName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateScannedSerialNumberToProcessResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateScannedSerialNumberToProcessResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable UpdateScannedSerialNumberToProcessResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public UpdateScannedSerialNumberToProcessResponse() {
        }
        
        public UpdateScannedSerialNumberToProcessResponse(System.Data.DataTable UpdateScannedSerialNumberToProcessResult, string result) {
            this.UpdateScannedSerialNumberToProcessResult = UpdateScannedSerialNumberToProcessResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateSetActiveSerialNumber", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateSetActiveSerialNumberRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string serialNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string taskType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string result;
        
        public UpdateSetActiveSerialNumberRequest() {
        }
        
        public UpdateSetActiveSerialNumberRequest(string serialNumber, int licenseId, string materialId, int wavePickingId, string login, string taskType, string environmentName, string result) {
            this.serialNumber = serialNumber;
            this.licenseId = licenseId;
            this.materialId = materialId;
            this.wavePickingId = wavePickingId;
            this.login = login;
            this.taskType = taskType;
            this.environmentName = environmentName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateSetActiveSerialNumberResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateSetActiveSerialNumberResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable UpdateSetActiveSerialNumberResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public UpdateSetActiveSerialNumberResponse() {
        }
        
        public UpdateSetActiveSerialNumberResponse(System.Data.DataTable UpdateSetActiveSerialNumberResult, string result) {
            this.UpdateSetActiveSerialNumberResult = UpdateSetActiveSerialNumberResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRequestedSerialNumberDiscretionalPickingByLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRequestedSerialNumberDiscretionalPickingByLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string result;
        
        public GetRequestedSerialNumberDiscretionalPickingByLicenseRequest() {
        }
        
        public GetRequestedSerialNumberDiscretionalPickingByLicenseRequest(int wavePickingId, int licenseId, string materialId, string environmentName, string result) {
            this.wavePickingId = wavePickingId;
            this.licenseId = licenseId;
            this.materialId = materialId;
            this.environmentName = environmentName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRequestedSerialNumberDiscretionalPickingByLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRequestedSerialNumberDiscretionalPickingByLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable GetRequestedSerialNumberDiscretionalPickingByLicenseResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public GetRequestedSerialNumberDiscretionalPickingByLicenseResponse() {
        }
        
        public GetRequestedSerialNumberDiscretionalPickingByLicenseResponse(System.Data.DataTable GetRequestedSerialNumberDiscretionalPickingByLicenseResult, string result) {
            this.GetRequestedSerialNumberDiscretionalPickingByLicenseResult = GetRequestedSerialNumberDiscretionalPickingByLicenseResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RollbackSerialNumbersOnProcess", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RollbackSerialNumbersOnProcessRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string taskType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string result;
        
        public RollbackSerialNumbersOnProcessRequest() {
        }
        
        public RollbackSerialNumbersOnProcessRequest(int wavePickingId, int licenseId, string materialId, string login, string taskType, string environmentName, string result) {
            this.wavePickingId = wavePickingId;
            this.licenseId = licenseId;
            this.materialId = materialId;
            this.login = login;
            this.taskType = taskType;
            this.environmentName = environmentName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RollbackSerialNumbersOnProcessResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RollbackSerialNumbersOnProcessResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable RollbackSerialNumbersOnProcessResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public RollbackSerialNumbersOnProcessResponse() {
        }
        
        public RollbackSerialNumbersOnProcessResponse(System.Data.DataTable RollbackSerialNumbersOnProcessResult, string result) {
            this.RollbackSerialNumbersOnProcessResult = RollbackSerialNumbersOnProcessResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateScannedReceptionDocument", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateScannedReceptionDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string document;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string environmentName;
        
        public ValidateScannedReceptionDocumentRequest() {
        }
        
        public ValidateScannedReceptionDocumentRequest(string document, string login, string pResult, string environmentName) {
            this.document = document;
            this.login = login;
            this.pResult = pResult;
            this.environmentName = environmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateScannedReceptionDocumentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateScannedReceptionDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidateScannedReceptionDocumentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public ValidateScannedReceptionDocumentResponse() {
        }
        
        public ValidateScannedReceptionDocumentResponse(bool ValidateScannedReceptionDocumentResult, string pResult) {
            this.ValidateScannedReceptionDocumentResult = ValidateScannedReceptionDocumentResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessScannedDocument", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ProcessScannedDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string document;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string enviromentName;
        
        public ProcessScannedDocumentRequest() {
        }
        
        public ProcessScannedDocumentRequest(string type, string document, string login, string pResult, string enviromentName) {
            this.type = type;
            this.document = document;
            this.login = login;
            this.pResult = pResult;
            this.enviromentName = enviromentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessScannedDocumentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ProcessScannedDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ProcessScannedDocumentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public ProcessScannedDocumentResponse() {
        }
        
        public ProcessScannedDocumentResponse(bool ProcessScannedDocumentResult, string pResult) {
            this.ProcessScannedDocumentResult = ProcessScannedDocumentResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertPickingLabel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertPickingLabelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string clientCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string enviromentName;
        
        public InsertPickingLabelRequest() {
        }
        
        public InsertPickingLabelRequest(string loginId, int wavePickingId, string clientCode, string pResult, string enviromentName) {
            this.loginId = loginId;
            this.wavePickingId = wavePickingId;
            this.clientCode = clientCode;
            this.pResult = pResult;
            this.enviromentName = enviromentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertPickingLabelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertPickingLabelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string InsertPickingLabelResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public InsertPickingLabelResponse() {
        }
        
        public InsertPickingLabelResponse(string InsertPickingLabelResult, string pResult) {
            this.InsertPickingLabelResult = InsertPickingLabelResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdatePickingLabel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdatePickingLabelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int labelId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string clientCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string barcode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public decimal qty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string codigoPoliza;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string sourceLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string targetLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string transitLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string serialNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public int wavePicking;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string enviromentName;
        
        public UpdatePickingLabelRequest() {
        }
        
        public UpdatePickingLabelRequest(int labelId, string clientCode, int licenseId, string barcode, decimal qty, string codigoPoliza, string sourceLocation, string targetLocation, string transitLocation, string serialNumber, int wavePicking, string pResult, string enviromentName) {
            this.labelId = labelId;
            this.clientCode = clientCode;
            this.licenseId = licenseId;
            this.barcode = barcode;
            this.qty = qty;
            this.codigoPoliza = codigoPoliza;
            this.sourceLocation = sourceLocation;
            this.targetLocation = targetLocation;
            this.transitLocation = transitLocation;
            this.serialNumber = serialNumber;
            this.wavePicking = wavePicking;
            this.pResult = pResult;
            this.enviromentName = enviromentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdatePickingLabelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdatePickingLabelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdatePickingLabelResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public UpdatePickingLabelResponse() {
        }
        
        public UpdatePickingLabelResponse(bool UpdatePickingLabelResult, string pResult) {
            this.UpdatePickingLabelResult = UpdatePickingLabelResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeletePickingLabel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DeletePickingLabelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int labelId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string enviromentName;
        
        public DeletePickingLabelRequest() {
        }
        
        public DeletePickingLabelRequest(int labelId, string pResult, string enviromentName) {
            this.labelId = labelId;
            this.pResult = pResult;
            this.enviromentName = enviromentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeletePickingLabelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DeletePickingLabelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool DeletePickingLabelResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pResult;
        
        public DeletePickingLabelResponse() {
        }
        
        public DeletePickingLabelResponse(bool DeletePickingLabelResult, string pResult) {
            this.DeletePickingLabelResult = DeletePickingLabelResult;
            this.pResult = pResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateIfPickingLicenseIsAvailable", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateIfPickingLicenseIsAvailableRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int wavePickingId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string currentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int licenseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string pEnvironmentName;
        
        public ValidateIfPickingLicenseIsAvailableRequest() {
        }
        
        public ValidateIfPickingLicenseIsAvailableRequest(int wavePickingId, string currentLocation, string materialId, int licenseId, string login, string result, string pEnvironmentName) {
            this.wavePickingId = wavePickingId;
            this.currentLocation = currentLocation;
            this.materialId = materialId;
            this.licenseId = licenseId;
            this.login = login;
            this.result = result;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateIfPickingLicenseIsAvailableResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateIfPickingLicenseIsAvailableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable ValidateIfPickingLicenseIsAvailableResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public ValidateIfPickingLicenseIsAvailableResponse() {
        }
        
        public ValidateIfPickingLicenseIsAvailableResponse(System.Data.DataTable ValidateIfPickingLicenseIsAvailableResult, string result) {
            this.ValidateIfPickingLicenseIsAvailableResult = ValidateIfPickingLicenseIsAvailableResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ObtenerMaterialesEnUnbicacionParaUnificar", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ObtenerMaterialesEnUnbicacionParaUnificarRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string currentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string pEnvironmentName;
        
        public ObtenerMaterialesEnUnbicacionParaUnificarRequest() {
        }
        
        public ObtenerMaterialesEnUnbicacionParaUnificarRequest(string currentLocation, string materialId, string result, string pEnvironmentName) {
            this.currentLocation = currentLocation;
            this.materialId = materialId;
            this.result = result;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ObtenerMaterialesEnUnbicacionParaUnificarResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ObtenerMaterialesEnUnbicacionParaUnificarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataSet ObtenerMaterialesEnUnbicacionParaUnificarResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public ObtenerMaterialesEnUnbicacionParaUnificarResponse() {
        }
        
        public ObtenerMaterialesEnUnbicacionParaUnificarResponse(System.Data.DataSet ObtenerMaterialesEnUnbicacionParaUnificarResult, string result) {
            this.ObtenerMaterialesEnUnbicacionParaUnificarResult = ObtenerMaterialesEnUnbicacionParaUnificarResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UnificarLicenciasPorUbicacionYMaterial", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UnificarLicenciasPorUbicacionYMaterialRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string currentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string materialId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string pEnvironmentName;
        
        public UnificarLicenciasPorUbicacionYMaterialRequest() {
        }
        
        public UnificarLicenciasPorUbicacionYMaterialRequest(string currentLocation, string materialId, string login, string result, string pEnvironmentName) {
            this.currentLocation = currentLocation;
            this.materialId = materialId;
            this.login = login;
            this.result = result;
            this.pEnvironmentName = pEnvironmentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UnificarLicenciasPorUbicacionYMaterialResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UnificarLicenciasPorUbicacionYMaterialResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataSet UnificarLicenciasPorUbicacionYMaterialResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public UnificarLicenciasPorUbicacionYMaterialResponse() {
        }
        
        public UnificarLicenciasPorUbicacionYMaterialResponse(System.Data.DataSet UnificarLicenciasPorUbicacionYMaterialResult, string result) {
            this.UnificarLicenciasPorUbicacionYMaterialResult = UnificarLicenciasPorUbicacionYMaterialResult;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateDeliveryNoteERP", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateDeliveryNoteERPRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int passId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string environmentName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string result;
        
        public UpdateDeliveryNoteERPRequest() {
        }
        
        public UpdateDeliveryNoteERPRequest(int passId, string status, string login, string environmentName, string result) {
            this.passId = passId;
            this.status = status;
            this.login = login;
            this.environmentName = environmentName;
            this.result = result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateDeliveryNoteERPResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateDeliveryNoteERPResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable UpdateDeliveryNoteERPResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string result;
        
        public UpdateDeliveryNoteERPResponse() {
        }
        
        public UpdateDeliveryNoteERPResponse(System.Data.DataTable UpdateDeliveryNoteERPResult, string result) {
            this.UpdateDeliveryNoteERPResult = UpdateDeliveryNoteERPResult;
            this.result = result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WMS_TransSoapChannel : MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WMS_TransSoapClient : System.ServiceModel.ClientBase<MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap>, MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap {
        
        public WMS_TransSoapClient() {
        }
        
        public WMS_TransSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WMS_TransSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMS_TransSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMS_TransSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RegisterOccupancy(MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest request) {
            return base.Channel.RegisterOccupancy(request);
        }
        
        public bool RegisterOccupancy(string pSOURCE_LOCATION, string pLOGIN_ID, double pOCCUPANCY_LEVEL, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest();
            inValue.pSOURCE_LOCATION = pSOURCE_LOCATION;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pOCCUPANCY_LEVEL = pOCCUPANCY_LEVEL;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RegisterOccupancy(inValue);
            pResult = retVal.pResult;
            return retVal.RegisterOccupancyResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyResponse> RegisterOccupancyAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterOccupancyRequest request) {
            return base.Channel.RegisterOccupancyAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.SetReceptionAuditSummary(MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest request) {
            return base.Channel.SetReceptionAuditSummary(request);
        }
        
        public bool SetReceptionAuditSummary(string pCODIGO_POLIZA, double pQTY1, double pQTY2, double pQTY3, double pQTY4, string pLOGIN_ID, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest();
            inValue.pCODIGO_POLIZA = pCODIGO_POLIZA;
            inValue.pQTY1 = pQTY1;
            inValue.pQTY2 = pQTY2;
            inValue.pQTY3 = pQTY3;
            inValue.pQTY4 = pQTY4;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).SetReceptionAuditSummary(inValue);
            pResult = retVal.pResult;
            return retVal.SetReceptionAuditSummaryResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryResponse> SetReceptionAuditSummaryAsync(MobilityScm.Modelo.OnePlanServices_Trans.SetReceptionAuditSummaryRequest request) {
            return base.Channel.SetReceptionAuditSummaryAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.SetTransWeigth(MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest request) {
            return base.Channel.SetTransWeigth(request);
        }
        
        public bool SetTransWeigth(int pSERIAL_NUMBER, double pWEIGTH, string pLOGIN_ID, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest();
            inValue.pSERIAL_NUMBER = pSERIAL_NUMBER;
            inValue.pWEIGTH = pWEIGTH;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).SetTransWeigth(inValue);
            pResult = retVal.pResult;
            return retVal.SetTransWeigthResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthResponse> SetTransWeigthAsync(MobilityScm.Modelo.OnePlanServices_Trans.SetTransWeigthRequest request) {
            return base.Channel.SetTransWeigthAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditCountResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.AuditCount(MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest request) {
            return base.Channel.AuditCount(request);
        }
        
        public bool AuditCount(int pAUDIT_ID, string pMETHOD, string pCODIGO_POLIZA, string pBARCODE_ID, int pQTY_INPUTED, string pSERIAL_ID, string pLOGIN_ID, string pOPTION, string pBatch, System.DateTime pDateExpirtacion, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest();
            inValue.pAUDIT_ID = pAUDIT_ID;
            inValue.pMETHOD = pMETHOD;
            inValue.pCODIGO_POLIZA = pCODIGO_POLIZA;
            inValue.pBARCODE_ID = pBARCODE_ID;
            inValue.pQTY_INPUTED = pQTY_INPUTED;
            inValue.pSERIAL_ID = pSERIAL_ID;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pOPTION = pOPTION;
            inValue.pBatch = pBatch;
            inValue.pDateExpirtacion = pDateExpirtacion;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.AuditCountResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).AuditCount(inValue);
            pResult = retVal.pResult;
            return retVal.AuditCountResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditCountResponse> AuditCountAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditCountRequest request) {
            return base.Channel.AuditCountAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.AuditStartCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest request) {
            return base.Channel.AuditStartCounting(request);
        }
        
        public bool AuditStartCounting(string pLOGIN_ID, string pCODIGO_POLIZA, string pCONTENEDOR, string pMETHOD, ref int pCREATED_AUDIT_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest();
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pCODIGO_POLIZA = pCODIGO_POLIZA;
            inValue.pCONTENEDOR = pCONTENEDOR;
            inValue.pMETHOD = pMETHOD;
            inValue.pCREATED_AUDIT_ID = pCREATED_AUDIT_ID;
            inValue.pOPTION = pOPTION;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).AuditStartCounting(inValue);
            pCREATED_AUDIT_ID = retVal.pCREATED_AUDIT_ID;
            pResult = retVal.pResult;
            return retVal.AuditStartCountingResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingResponse> AuditStartCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditStartCountingRequest request) {
            return base.Channel.AuditStartCountingAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.AuditFinishCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest request) {
            return base.Channel.AuditFinishCounting(request);
        }
        
        public bool AuditFinishCounting(int pAUDIT_ID, string pLOGIN_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest();
            inValue.pAUDIT_ID = pAUDIT_ID;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pOPTION = pOPTION;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).AuditFinishCounting(inValue);
            pResult = retVal.pResult;
            return retVal.AuditFinishCountingResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingResponse> AuditFinishCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditFinishCountingRequest request) {
            return base.Channel.AuditFinishCountingAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.LicenseReAlloc(MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest request) {
            return base.Channel.LicenseReAlloc(request);
        }
        
        public bool LicenseReAlloc(int pLICENSE_ID, string pNEW_LOCATION, string pLOGIN_ID, decimal pMt2, ref string pResult, string pEnvironmentName, string paramName) {
            MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest();
            inValue.pLICENSE_ID = pLICENSE_ID;
            inValue.pNEW_LOCATION = pNEW_LOCATION;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pMt2 = pMt2;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.paramName = paramName;
            MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).LicenseReAlloc(inValue);
            pResult = retVal.pResult;
            return retVal.LicenseReAllocResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocResponse> LicenseReAllocAsync(MobilityScm.Modelo.OnePlanServices_Trans.LicenseReAllocRequest request) {
            return base.Channel.LicenseReAllocAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.AuditResetCounting(MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest request) {
            return base.Channel.AuditResetCounting(request);
        }
        
        public bool AuditResetCounting(int pAUDIT_ID, string pBARCODE_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest();
            inValue.pAUDIT_ID = pAUDIT_ID;
            inValue.pBARCODE_ID = pBARCODE_ID;
            inValue.pOPTION = pOPTION;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).AuditResetCounting(inValue);
            pResult = retVal.pResult;
            return retVal.AuditResetCountingResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingResponse> AuditResetCountingAsync(MobilityScm.Modelo.OnePlanServices_Trans.AuditResetCountingRequest request) {
            return base.Channel.AuditResetCountingAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.AllocLicense(MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest request) {
            return base.Channel.AllocLicense(request);
        }
        
        public bool AllocLicense(int pLicenseID, string pTargetLocation, string pLoginID, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest();
            inValue.pLicenseID = pLicenseID;
            inValue.pTargetLocation = pTargetLocation;
            inValue.pLoginID = pLoginID;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).AllocLicense(inValue);
            pResult = retVal.pResult;
            return retVal.AllocLicenseResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseResponse> AllocLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.AllocLicenseRequest request) {
            return base.Channel.AllocLicenseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RegisterTrans(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest request) {
            return base.Channel.RegisterTrans(request);
        }
        
        public bool RegisterTrans(
                    string pTRADE_AGREEMENT, 
                    string pLOGIN_ID, 
                    string pTRANS_TYPE, 
                    string pTRANS_EXTRA_COMMENTS, 
                    string pMATERIAL_BARCODE, 
                    string pMATERIAL_ID, 
                    int pSOURCE_LICENSE, 
                    int pTARGET_LICENSE, 
                    string pSOURCE_LOCATION, 
                    string pTARGET_LOCATION, 
                    string pCLIENT_OWNER, 
                    double pQUANTITY_UNITS, 
                    string pSOURCE_WAREHOUSE, 
                    string pTARGET_WAREHOUSE, 
                    string pTRANS_SUBTYPE, 
                    ref string pCODIGO_POLIZA, 
                    int pLICENSE_ID, 
                    string pSTATUS, 
                    int pWAVE_PICKING_ID, 
                    int pSERIAL_NUMBER, 
                    decimal pTransMT2, 
                    string pTipoUbicacion, 
                    decimal pMt2, 
                    string pVin, 
                    string pTask_Id, 
                    string pSerial, 
                    string pLote, 
                    System.DateTime pFechaLote, 
                    ref string pResult, 
                    string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest();
            inValue.pTRADE_AGREEMENT = pTRADE_AGREEMENT;
            inValue.pLOGIN_ID = pLOGIN_ID;
            inValue.pTRANS_TYPE = pTRANS_TYPE;
            inValue.pTRANS_EXTRA_COMMENTS = pTRANS_EXTRA_COMMENTS;
            inValue.pMATERIAL_BARCODE = pMATERIAL_BARCODE;
            inValue.pMATERIAL_ID = pMATERIAL_ID;
            inValue.pSOURCE_LICENSE = pSOURCE_LICENSE;
            inValue.pTARGET_LICENSE = pTARGET_LICENSE;
            inValue.pSOURCE_LOCATION = pSOURCE_LOCATION;
            inValue.pTARGET_LOCATION = pTARGET_LOCATION;
            inValue.pCLIENT_OWNER = pCLIENT_OWNER;
            inValue.pQUANTITY_UNITS = pQUANTITY_UNITS;
            inValue.pSOURCE_WAREHOUSE = pSOURCE_WAREHOUSE;
            inValue.pTARGET_WAREHOUSE = pTARGET_WAREHOUSE;
            inValue.pTRANS_SUBTYPE = pTRANS_SUBTYPE;
            inValue.pCODIGO_POLIZA = pCODIGO_POLIZA;
            inValue.pLICENSE_ID = pLICENSE_ID;
            inValue.pSTATUS = pSTATUS;
            inValue.pWAVE_PICKING_ID = pWAVE_PICKING_ID;
            inValue.pSERIAL_NUMBER = pSERIAL_NUMBER;
            inValue.pTransMT2 = pTransMT2;
            inValue.pTipoUbicacion = pTipoUbicacion;
            inValue.pMt2 = pMt2;
            inValue.pVin = pVin;
            inValue.pTask_Id = pTask_Id;
            inValue.pSerial = pSerial;
            inValue.pLote = pLote;
            inValue.pFechaLote = pFechaLote;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RegisterTrans(inValue);
            pCODIGO_POLIZA = retVal.pCODIGO_POLIZA;
            pResult = retVal.pResult;
            return retVal.RegisterTransResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransResponse> RegisterTransAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRequest request) {
            return base.Channel.RegisterTransAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.CreateTypeChangeXLicense(MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest request) {
            return base.Channel.CreateTypeChangeXLicense(request);
        }
        
        public bool CreateTypeChangeXLicense(int pLicenseID, int pTypeCharge, int pQty, string pLastUpdatedBy, string pTypeTrans, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest();
            inValue.pLicenseID = pLicenseID;
            inValue.pTypeCharge = pTypeCharge;
            inValue.pQty = pQty;
            inValue.pLastUpdatedBy = pLastUpdatedBy;
            inValue.pTypeTrans = pTypeTrans;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).CreateTypeChangeXLicense(inValue);
            pResult = retVal.pResult;
            return retVal.CreateTypeChangeXLicenseResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseResponse> CreateTypeChangeXLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.CreateTypeChangeXLicenseRequest request) {
            return base.Channel.CreateTypeChangeXLicenseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateStatusQuotaLetter(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest request) {
            return base.Channel.UpdateStatusQuotaLetter(request);
        }
        
        public bool UpdateStatusQuotaLetter(int pDocId, string pStatus, string pUserId, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest();
            inValue.pDocId = pDocId;
            inValue.pStatus = pStatus;
            inValue.pUserId = pUserId;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateStatusQuotaLetter(inValue);
            pResult = retVal.pResult;
            return retVal.UpdateStatusQuotaLetterResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterResponse> UpdateStatusQuotaLetterAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusQuotaLetterRequest request) {
            return base.Channel.UpdateStatusQuotaLetterAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.CreateAcuseRecibo(MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest request) {
            return base.Channel.CreateAcuseRecibo(request);
        }
        
        public bool CreateAcuseRecibo(string pPoliza, string pFob, System.DateTime pDate, string pCodigoTransportista, string pPlacaTransportista, string pNumeroContenedor, string pNumeroMarchamo, string pUserId, byte[] pFoto1, byte[] pFoto2, byte[] pFoto3, string pStatus, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest();
            inValue.pPoliza = pPoliza;
            inValue.pFob = pFob;
            inValue.pDate = pDate;
            inValue.pCodigoTransportista = pCodigoTransportista;
            inValue.pPlacaTransportista = pPlacaTransportista;
            inValue.pNumeroContenedor = pNumeroContenedor;
            inValue.pNumeroMarchamo = pNumeroMarchamo;
            inValue.pUserId = pUserId;
            inValue.pFoto1 = pFoto1;
            inValue.pFoto2 = pFoto2;
            inValue.pFoto3 = pFoto3;
            inValue.pStatus = pStatus;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).CreateAcuseRecibo(inValue);
            pResult = retVal.pResult;
            return retVal.CreateAcuseReciboResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboResponse> CreateAcuseReciboAsync(MobilityScm.Modelo.OnePlanServices_Trans.CreateAcuseReciboRequest request) {
            return base.Channel.CreateAcuseReciboAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateStatusSapService(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest request) {
            return base.Channel.UpdateStatusSapService(request);
        }
        
        public bool UpdateStatusSapService(int pDocId, string pStatus, ref string pResult, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest();
            inValue.pDocId = pDocId;
            inValue.pStatus = pStatus;
            inValue.pResult = pResult;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateStatusSapService(inValue);
            pResult = retVal.pResult;
            return retVal.UpdateStatusSapServiceResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceResponse> UpdateStatusSapServiceAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateStatusSapServiceRequest request) {
            return base.Channel.UpdateStatusSapServiceAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ActualizarEstadoTareaDeRecepcion(MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest request) {
            return base.Channel.ActualizarEstadoTareaDeRecepcion(request);
        }
        
        public bool ActualizarEstadoTareaDeRecepcion(string CodigoPoliza, string LogIn, string Regimen, string Estatus, int TaskId, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest();
            inValue.CodigoPoliza = CodigoPoliza;
            inValue.LogIn = LogIn;
            inValue.Regimen = Regimen;
            inValue.Estatus = Estatus;
            inValue.TaskId = TaskId;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ActualizarEstadoTareaDeRecepcion(inValue);
            pResult = retVal.pResult;
            return retVal.ActualizarEstadoTareaDeRecepcionResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionResponse> ActualizarEstadoTareaDeRecepcionAsync(MobilityScm.Modelo.OnePlanServices_Trans.ActualizarEstadoTareaDeRecepcionRequest request) {
            return base.Channel.ActualizarEstadoTareaDeRecepcionAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RollBackALicencia(MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest request) {
            return base.Channel.RollBackALicencia(request);
        }
        
        public bool RollBackALicencia(int LicenceId, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest();
            inValue.LicenceId = LicenceId;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RollBackALicencia(inValue);
            pResult = retVal.pResult;
            return retVal.RollBackALicenciaResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaResponse> RollBackALicenciaAsync(MobilityScm.Modelo.OnePlanServices_Trans.RollBackALicenciaRequest request) {
            return base.Channel.RollBackALicenciaAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ExplodeMasterPack(MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest request) {
            return base.Channel.ExplodeMasterPack(request);
        }
        
        public bool ExplodeMasterPack(int LicenceId, string MaterialId, string LastUpdateBy, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest();
            inValue.LicenceId = LicenceId;
            inValue.MaterialId = MaterialId;
            inValue.LastUpdateBy = LastUpdateBy;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ExplodeMasterPack(inValue);
            pResult = retVal.pResult;
            return retVal.ExplodeMasterPackResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackResponse> ExplodeMasterPackAsync(MobilityScm.Modelo.OnePlanServices_Trans.ExplodeMasterPackRequest request) {
            return base.Channel.ExplodeMasterPackAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.GetMasterPackByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest request) {
            return base.Channel.GetMasterPackByLicense(request);
        }
        
        public System.Data.DataTable GetMasterPackByLicense(int licenceId, string MaterialId, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest();
            inValue.licenceId = licenceId;
            inValue.MaterialId = MaterialId;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).GetMasterPackByLicense(inValue);
            pResult = retVal.pResult;
            return retVal.GetMasterPackByLicenseResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseResponse> GetMasterPackByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetMasterPackByLicenseRequest request) {
            return base.Channel.GetMasterPackByLicenseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.GetDetailMasterPackByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest request) {
            return base.Channel.GetDetailMasterPackByLicense(request);
        }
        
        public System.Data.DataTable GetDetailMasterPackByLicense(int licenceId, string materialId, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest();
            inValue.licenceId = licenceId;
            inValue.materialId = materialId;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).GetDetailMasterPackByLicense(inValue);
            pResult = retVal.pResult;
            return retVal.GetDetailMasterPackByLicenseResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseResponse> GetDetailMasterPackByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetDetailMasterPackByLicenseRequest request) {
            return base.Channel.GetDetailMasterPackByLicenseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateLocationTargerTask(MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest request) {
            return base.Channel.UpdateLocationTargerTask(request);
        }
        
        public bool UpdateLocationTargerTask(int wevePickingId, string login, string locationSpotTarget, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest();
            inValue.wevePickingId = wevePickingId;
            inValue.login = login;
            inValue.locationSpotTarget = locationSpotTarget;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateLocationTargerTask(inValue);
            pResult = retVal.pResult;
            return retVal.UpdateLocationTargerTaskResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskResponse> UpdateLocationTargerTaskAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateLocationTargerTaskRequest request) {
            return base.Channel.UpdateLocationTargerTaskAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.CancelPickingDetailLine(MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest request) {
            return base.Channel.CancelPickingDetailLine(request);
        }
        
        public bool CancelPickingDetailLine(int wavePickingId, string login, string materialId, string pEnvironmentName, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest();
            inValue.wavePickingId = wavePickingId;
            inValue.login = login;
            inValue.materialId = materialId;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).CancelPickingDetailLine(inValue);
            pResult = retVal.pResult;
            return retVal.CancelPickingDetailLineResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineResponse> CancelPickingDetailLineAsync(MobilityScm.Modelo.OnePlanServices_Trans.CancelPickingDetailLineRequest request) {
            return base.Channel.CancelPickingDetailLineAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RegisterTransReallocForReplenishment(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest request) {
            return base.Channel.RegisterTransReallocForReplenishment(request);
        }
        
        public bool RegisterTransReallocForReplenishment(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string pEnvironmentName, ref int newLiceceId, ref string pResult) {
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest();
            inValue.login = login;
            inValue.materialId = materialId;
            inValue.materialBarcode = materialBarcode;
            inValue.sourceLicence = sourceLicence;
            inValue.sourceLocation = sourceLocation;
            inValue.qty = qty;
            inValue.wavePickingId = wavePickingId;
            inValue.mt2 = mt2;
            inValue.typeLocation = typeLocation;
            inValue.targetLocation = targetLocation;
            inValue.pEnvironmentName = pEnvironmentName;
            inValue.newLiceceId = newLiceceId;
            inValue.pResult = pResult;
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RegisterTransReallocForReplenishment(inValue);
            newLiceceId = retVal.newLiceceId;
            pResult = retVal.pResult;
            return retVal.RegisterTransReallocForReplenishmentResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentResponse> RegisterTransReallocForReplenishmentAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransReallocForReplenishmentRequest request) {
            return base.Channel.RegisterTransReallocForReplenishmentAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RegisterTransRelocateForNoImmediatePicking(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest request) {
            return base.Channel.RegisterTransRelocateForNoImmediatePicking(request);
        }
        
        public bool RegisterTransRelocateForNoImmediatePicking(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string environmentName, ref int newLicenseId, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest();
            inValue.login = login;
            inValue.materialId = materialId;
            inValue.materialBarcode = materialBarcode;
            inValue.sourceLicence = sourceLicence;
            inValue.sourceLocation = sourceLocation;
            inValue.qty = qty;
            inValue.wavePickingId = wavePickingId;
            inValue.mt2 = mt2;
            inValue.typeLocation = typeLocation;
            inValue.targetLocation = targetLocation;
            inValue.environmentName = environmentName;
            inValue.newLicenseId = newLicenseId;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RegisterTransRelocateForNoImmediatePicking(inValue);
            newLicenseId = retVal.newLicenseId;
            result = retVal.result;
            return retVal.RegisterTransRelocateForNoImmediatePickingResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingResponse> RegisterTransRelocateForNoImmediatePickingAsync(MobilityScm.Modelo.OnePlanServices_Trans.RegisterTransRelocateForNoImmediatePickingRequest request) {
            return base.Channel.RegisterTransRelocateForNoImmediatePickingAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateScannedSerialNumberToProcess(MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest request) {
            return base.Channel.UpdateScannedSerialNumberToProcess(request);
        }
        
        public System.Data.DataTable UpdateScannedSerialNumberToProcess(string serialNumber, int licenseId, int wavePickingId, string materialId, string login, string taskType, string environmentName, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest();
            inValue.serialNumber = serialNumber;
            inValue.licenseId = licenseId;
            inValue.wavePickingId = wavePickingId;
            inValue.materialId = materialId;
            inValue.login = login;
            inValue.taskType = taskType;
            inValue.environmentName = environmentName;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateScannedSerialNumberToProcess(inValue);
            result = retVal.result;
            return retVal.UpdateScannedSerialNumberToProcessResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessResponse> UpdateScannedSerialNumberToProcessAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateScannedSerialNumberToProcessRequest request) {
            return base.Channel.UpdateScannedSerialNumberToProcessAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateSetActiveSerialNumber(MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest request) {
            return base.Channel.UpdateSetActiveSerialNumber(request);
        }
        
        public System.Data.DataTable UpdateSetActiveSerialNumber(string serialNumber, int licenseId, string materialId, int wavePickingId, string login, string taskType, string environmentName, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest();
            inValue.serialNumber = serialNumber;
            inValue.licenseId = licenseId;
            inValue.materialId = materialId;
            inValue.wavePickingId = wavePickingId;
            inValue.login = login;
            inValue.taskType = taskType;
            inValue.environmentName = environmentName;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateSetActiveSerialNumber(inValue);
            result = retVal.result;
            return retVal.UpdateSetActiveSerialNumberResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberResponse> UpdateSetActiveSerialNumberAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateSetActiveSerialNumberRequest request) {
            return base.Channel.UpdateSetActiveSerialNumberAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.GetRequestedSerialNumberDiscretionalPickingByLicense(MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest request) {
            return base.Channel.GetRequestedSerialNumberDiscretionalPickingByLicense(request);
        }
        
        public System.Data.DataTable GetRequestedSerialNumberDiscretionalPickingByLicense(int wavePickingId, int licenseId, string materialId, string environmentName, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest();
            inValue.wavePickingId = wavePickingId;
            inValue.licenseId = licenseId;
            inValue.materialId = materialId;
            inValue.environmentName = environmentName;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).GetRequestedSerialNumberDiscretionalPickingByLicense(inValue);
            result = retVal.result;
            return retVal.GetRequestedSerialNumberDiscretionalPickingByLicenseResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseResponse> GetRequestedSerialNumberDiscretionalPickingByLicenseAsync(MobilityScm.Modelo.OnePlanServices_Trans.GetRequestedSerialNumberDiscretionalPickingByLicenseRequest request) {
            return base.Channel.GetRequestedSerialNumberDiscretionalPickingByLicenseAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.RollbackSerialNumbersOnProcess(MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest request) {
            return base.Channel.RollbackSerialNumbersOnProcess(request);
        }
        
        public System.Data.DataTable RollbackSerialNumbersOnProcess(int wavePickingId, int licenseId, string materialId, string login, string taskType, string environmentName, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest();
            inValue.wavePickingId = wavePickingId;
            inValue.licenseId = licenseId;
            inValue.materialId = materialId;
            inValue.login = login;
            inValue.taskType = taskType;
            inValue.environmentName = environmentName;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).RollbackSerialNumbersOnProcess(inValue);
            result = retVal.result;
            return retVal.RollbackSerialNumbersOnProcessResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessResponse> RollbackSerialNumbersOnProcessAsync(MobilityScm.Modelo.OnePlanServices_Trans.RollbackSerialNumbersOnProcessRequest request) {
            return base.Channel.RollbackSerialNumbersOnProcessAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ValidateScannedReceptionDocument(MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest request) {
            return base.Channel.ValidateScannedReceptionDocument(request);
        }
        
        public bool ValidateScannedReceptionDocument(string document, string login, ref string pResult, string environmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest();
            inValue.document = document;
            inValue.login = login;
            inValue.pResult = pResult;
            inValue.environmentName = environmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ValidateScannedReceptionDocument(inValue);
            pResult = retVal.pResult;
            return retVal.ValidateScannedReceptionDocumentResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentResponse> ValidateScannedReceptionDocumentAsync(MobilityScm.Modelo.OnePlanServices_Trans.ValidateScannedReceptionDocumentRequest request) {
            return base.Channel.ValidateScannedReceptionDocumentAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ProcessScannedDocument(MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest request) {
            return base.Channel.ProcessScannedDocument(request);
        }
        
        public bool ProcessScannedDocument(string type, string document, string login, ref string pResult, string enviromentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest();
            inValue.type = type;
            inValue.document = document;
            inValue.login = login;
            inValue.pResult = pResult;
            inValue.enviromentName = enviromentName;
            MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ProcessScannedDocument(inValue);
            pResult = retVal.pResult;
            return retVal.ProcessScannedDocumentResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentResponse> ProcessScannedDocumentAsync(MobilityScm.Modelo.OnePlanServices_Trans.ProcessScannedDocumentRequest request) {
            return base.Channel.ProcessScannedDocumentAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.InsertPickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest request) {
            return base.Channel.InsertPickingLabel(request);
        }
        
        public string InsertPickingLabel(string loginId, int wavePickingId, string clientCode, ref string pResult, string enviromentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest();
            inValue.loginId = loginId;
            inValue.wavePickingId = wavePickingId;
            inValue.clientCode = clientCode;
            inValue.pResult = pResult;
            inValue.enviromentName = enviromentName;
            MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).InsertPickingLabel(inValue);
            pResult = retVal.pResult;
            return retVal.InsertPickingLabelResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelResponse> InsertPickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.InsertPickingLabelRequest request) {
            return base.Channel.InsertPickingLabelAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdatePickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest request) {
            return base.Channel.UpdatePickingLabel(request);
        }
        
        public bool UpdatePickingLabel(int labelId, string clientCode, int licenseId, string barcode, decimal qty, string codigoPoliza, string sourceLocation, string targetLocation, string transitLocation, string serialNumber, int wavePicking, ref string pResult, string enviromentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest();
            inValue.labelId = labelId;
            inValue.clientCode = clientCode;
            inValue.licenseId = licenseId;
            inValue.barcode = barcode;
            inValue.qty = qty;
            inValue.codigoPoliza = codigoPoliza;
            inValue.sourceLocation = sourceLocation;
            inValue.targetLocation = targetLocation;
            inValue.transitLocation = transitLocation;
            inValue.serialNumber = serialNumber;
            inValue.wavePicking = wavePicking;
            inValue.pResult = pResult;
            inValue.enviromentName = enviromentName;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdatePickingLabel(inValue);
            pResult = retVal.pResult;
            return retVal.UpdatePickingLabelResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelResponse> UpdatePickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdatePickingLabelRequest request) {
            return base.Channel.UpdatePickingLabelAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.DeletePickingLabel(MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest request) {
            return base.Channel.DeletePickingLabel(request);
        }
        
        public bool DeletePickingLabel(int labelId, ref string pResult, string enviromentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest();
            inValue.labelId = labelId;
            inValue.pResult = pResult;
            inValue.enviromentName = enviromentName;
            MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).DeletePickingLabel(inValue);
            pResult = retVal.pResult;
            return retVal.DeletePickingLabelResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelResponse> DeletePickingLabelAsync(MobilityScm.Modelo.OnePlanServices_Trans.DeletePickingLabelRequest request) {
            return base.Channel.DeletePickingLabelAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ValidateIfPickingLicenseIsAvailable(MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest request) {
            return base.Channel.ValidateIfPickingLicenseIsAvailable(request);
        }
        
        public System.Data.DataTable ValidateIfPickingLicenseIsAvailable(int wavePickingId, string currentLocation, string materialId, int licenseId, string login, ref string result, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest();
            inValue.wavePickingId = wavePickingId;
            inValue.currentLocation = currentLocation;
            inValue.materialId = materialId;
            inValue.licenseId = licenseId;
            inValue.login = login;
            inValue.result = result;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ValidateIfPickingLicenseIsAvailable(inValue);
            result = retVal.result;
            return retVal.ValidateIfPickingLicenseIsAvailableResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableResponse> ValidateIfPickingLicenseIsAvailableAsync(MobilityScm.Modelo.OnePlanServices_Trans.ValidateIfPickingLicenseIsAvailableRequest request) {
            return base.Channel.ValidateIfPickingLicenseIsAvailableAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.ObtenerMaterialesEnUnbicacionParaUnificar(MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest request) {
            return base.Channel.ObtenerMaterialesEnUnbicacionParaUnificar(request);
        }
        
        public System.Data.DataSet ObtenerMaterialesEnUnbicacionParaUnificar(string currentLocation, string materialId, ref string result, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest();
            inValue.currentLocation = currentLocation;
            inValue.materialId = materialId;
            inValue.result = result;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).ObtenerMaterialesEnUnbicacionParaUnificar(inValue);
            result = retVal.result;
            return retVal.ObtenerMaterialesEnUnbicacionParaUnificarResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarResponse> ObtenerMaterialesEnUnbicacionParaUnificarAsync(MobilityScm.Modelo.OnePlanServices_Trans.ObtenerMaterialesEnUnbicacionParaUnificarRequest request) {
            return base.Channel.ObtenerMaterialesEnUnbicacionParaUnificarAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UnificarLicenciasPorUbicacionYMaterial(MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest request) {
            return base.Channel.UnificarLicenciasPorUbicacionYMaterial(request);
        }
        
        public System.Data.DataSet UnificarLicenciasPorUbicacionYMaterial(string currentLocation, string materialId, string login, ref string result, string pEnvironmentName) {
            MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest();
            inValue.currentLocation = currentLocation;
            inValue.materialId = materialId;
            inValue.login = login;
            inValue.result = result;
            inValue.pEnvironmentName = pEnvironmentName;
            MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UnificarLicenciasPorUbicacionYMaterial(inValue);
            result = retVal.result;
            return retVal.UnificarLicenciasPorUbicacionYMaterialResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialResponse> UnificarLicenciasPorUbicacionYMaterialAsync(MobilityScm.Modelo.OnePlanServices_Trans.UnificarLicenciasPorUbicacionYMaterialRequest request) {
            return base.Channel.UnificarLicenciasPorUbicacionYMaterialAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPResponse MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap.UpdateDeliveryNoteERP(MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest request) {
            return base.Channel.UpdateDeliveryNoteERP(request);
        }
        
        public System.Data.DataTable UpdateDeliveryNoteERP(int passId, string status, string login, string environmentName, ref string result) {
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest inValue = new MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest();
            inValue.passId = passId;
            inValue.status = status;
            inValue.login = login;
            inValue.environmentName = environmentName;
            inValue.result = result;
            MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPResponse retVal = ((MobilityScm.Modelo.OnePlanServices_Trans.WMS_TransSoap)(this)).UpdateDeliveryNoteERP(inValue);
            result = retVal.result;
            return retVal.UpdateDeliveryNoteERPResult;
        }
        
        public System.Threading.Tasks.Task<MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPResponse> UpdateDeliveryNoteERPAsync(MobilityScm.Modelo.OnePlanServices_Trans.UpdateDeliveryNoteERPRequest request) {
            return base.Channel.UpdateDeliveryNoteERPAsync(request);
        }
    }
}
