//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8745
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8745.
// 
namespace MobilityScm.Modelo.Vistas.Certificacion.Wms_Certification {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WMS_CertificationSoap", Namespace="http://tempuri.org/")]
    public partial class WMS_Certification : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public WMS_Certification() {
            this.Url = "http://localhost:8088/WMSOnePlan_BusinessServices/Trans/WMS_Certification.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManifiestHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetManifiestHeader(int manifestHeader, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetManifiestHeader", new object[] {
                        manifestHeader,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetManifiestHeader(int manifestHeader, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetManifiestHeader", new object[] {
                        manifestHeader,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetManifiestHeader(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabelDataForManifest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLabelDataForManifest(int manifestHeaderId, int labelId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetLabelDataForManifest", new object[] {
                        manifestHeaderId,
                        labelId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabelDataForManifest(int manifestHeaderId, int labelId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabelDataForManifest", new object[] {
                        manifestHeaderId,
                        labelId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetLabelDataForManifest(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MarkManifestAsCertified", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MarkManifestAsCertified(int manifestHeaderId, int certificationHeaderId, string lastUpdateBy, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("MarkManifestAsCertified", new object[] {
                        manifestHeaderId,
                        certificationHeaderId,
                        lastUpdateBy,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMarkManifestAsCertified(int manifestHeaderId, int certificationHeaderId, string lastUpdateBy, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MarkManifestAsCertified", new object[] {
                        manifestHeaderId,
                        certificationHeaderId,
                        lastUpdateBy,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndMarkManifestAsCertified(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCertificationHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable InsertCertificationHeader(int certificationHeaderId, string createBy, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("InsertCertificationHeader", new object[] {
                        certificationHeaderId,
                        createBy,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertCertificationHeader(int certificationHeaderId, string createBy, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertCertificationHeader", new object[] {
                        certificationHeaderId,
                        createBy,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndInsertCertificationHeader(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCertificationDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable InsertCertificationDetail(int certificationHeaderId, int labelId, decimal qty, string certificationType, string lastUpdate, string materialId, string boxBarCode, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("InsertCertificationDetail", new object[] {
                        certificationHeaderId,
                        labelId,
                        qty,
                        certificationType,
                        lastUpdate,
                        materialId,
                        boxBarCode,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertCertificationDetail(int certificationHeaderId, int labelId, decimal qty, string certificationType, string lastUpdate, string materialId, string boxBarCode, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertCertificationDetail", new object[] {
                        certificationHeaderId,
                        labelId,
                        qty,
                        certificationType,
                        lastUpdate,
                        materialId,
                        boxBarCode,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndInsertCertificationDetail(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCertificationDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DeleteCertificationDetail(int certificationDetailrId, string boxBarCode, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("DeleteCertificationDetail", new object[] {
                        certificationDetailrId,
                        boxBarCode,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificationDetail(int certificationDetailrId, string boxBarCode, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCertificationDetail", new object[] {
                        certificationDetailrId,
                        boxBarCode,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndDeleteCertificationDetail(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaterialForManifest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMaterialForManifest(int manifestHeaderId, string barcodeId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetMaterialForManifest", new object[] {
                        manifestHeaderId,
                        barcodeId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMaterialForManifest(int manifestHeaderId, string barcodeId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMaterialForManifest", new object[] {
                        manifestHeaderId,
                        barcodeId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetMaterialForManifest(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateIfCertificationIsComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ValidateIfCertificationIsComplete(int certificationHeaderId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ValidateIfCertificationIsComplete", new object[] {
                        certificationHeaderId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateIfCertificationIsComplete(int certificationHeaderId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateIfCertificationIsComplete", new object[] {
                        certificationHeaderId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndValidateIfCertificationIsComplete(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCertificationDetailConsolidated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCertificationDetailConsolidated(int certificationHeaderId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetCertificationDetailConsolidated", new object[] {
                        certificationHeaderId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCertificationDetailConsolidated(int certificationHeaderId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCertificationDetailConsolidated", new object[] {
                        certificationHeaderId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCertificationDetailConsolidated(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCertificationBySerialNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable InsertCertificationBySerialNumber(int certificationHeaderId, int manifestHeaderId, string materialId, string serialNumber, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("InsertCertificationBySerialNumber", new object[] {
                        certificationHeaderId,
                        manifestHeaderId,
                        materialId,
                        serialNumber,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertCertificationBySerialNumber(int certificationHeaderId, int manifestHeaderId, string materialId, string serialNumber, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertCertificationBySerialNumber", new object[] {
                        certificationHeaderId,
                        manifestHeaderId,
                        materialId,
                        serialNumber,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndInsertCertificationBySerialNumber(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCertificationBySerialNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DeleteCertificationBySerialNumber(int certificationHeaderId, string materialId, string serialNumber, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("DeleteCertificationBySerialNumber", new object[] {
                        certificationHeaderId,
                        materialId,
                        serialNumber,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificationBySerialNumber(int certificationHeaderId, string materialId, string serialNumber, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCertificationBySerialNumber", new object[] {
                        certificationHeaderId,
                        materialId,
                        serialNumber,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndDeleteCertificationBySerialNumber(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
    }
}
