//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8745
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8745.
// 
namespace MobilityScm.Modelo.Vistas.EntregaDeDespacho.WMS_DeliveredLabels {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WMS_DeliveredLabelsSoap", Namespace="http://tempuri.org/")]
    public partial class WMS_DeliveredLabels : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public WMS_DeliveredLabels() {
            this.Url = "http://localhost:8088/WMSOnePlan_BusinessServices/Trans/WMS_DeliveredLabels.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabelsByWavePicking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLabelsByWavePicking(int wavePickingId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetLabelsByWavePicking", new object[] {
                        wavePickingId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabelsByWavePicking(int wavePickingId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabelsByWavePicking", new object[] {
                        wavePickingId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetLabelsByWavePicking(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDeliveredDispatchHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable InsertDeliveredDispatchHeader(int wavePickingId, string status, string loginId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("InsertDeliveredDispatchHeader", new object[] {
                        wavePickingId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertDeliveredDispatchHeader(int wavePickingId, string status, string loginId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertDeliveredDispatchHeader", new object[] {
                        wavePickingId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndInsertDeliveredDispatchHeader(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeStatusDEliveredDispatchHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ChangeStatusDEliveredDispatchHeader(int deliveredDispatchHeaderId, string status, string loginId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ChangeStatusDEliveredDispatchHeader", new object[] {
                        deliveredDispatchHeaderId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeStatusDEliveredDispatchHeader(int deliveredDispatchHeaderId, string status, string loginId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeStatusDEliveredDispatchHeader", new object[] {
                        deliveredDispatchHeaderId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndChangeStatusDEliveredDispatchHeader(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateIfDeliveryPickingIsComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ValidateIfDeliveryPickingIsComplete(int wavePickingId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ValidateIfDeliveryPickingIsComplete", new object[] {
                        wavePickingId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateIfDeliveryPickingIsComplete(int wavePickingId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateIfDeliveryPickingIsComplete", new object[] {
                        wavePickingId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndValidateIfDeliveryPickingIsComplete(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDeliveredLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable InsertDeliveredLabel(int deliveredDispatchHeaderId, int wavePickingId, int labelId, string status, string loginId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("InsertDeliveredLabel", new object[] {
                        deliveredDispatchHeaderId,
                        wavePickingId,
                        labelId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertDeliveredLabel(int deliveredDispatchHeaderId, int wavePickingId, int labelId, string status, string loginId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertDeliveredLabel", new object[] {
                        deliveredDispatchHeaderId,
                        wavePickingId,
                        labelId,
                        status,
                        loginId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndInsertDeliveredLabel(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeLabelStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ChangeLabelStatus(int labelId, string status, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ChangeLabelStatus", new object[] {
                        labelId,
                        status,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeLabelStatus(int labelId, string status, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeLabelStatus", new object[] {
                        labelId,
                        status,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndChangeLabelStatus(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDeliveredLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DeleteDeliveredLabel(int labelId, string status, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("DeleteDeliveredLabel", new object[] {
                        labelId,
                        status,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDeliveredLabel(int labelId, string status, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDeliveredLabel", new object[] {
                        labelId,
                        status,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndDeleteDeliveredLabel(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeliveredDispatchDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDeliveredDispatchDetail(int deliveredDispatchHeaderId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("GetDeliveredDispatchDetail", new object[] {
                        deliveredDispatchHeaderId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDeliveredDispatchDetail(int deliveredDispatchHeaderId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeliveredDispatchDetail", new object[] {
                        deliveredDispatchHeaderId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDeliveredDispatchDetail(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
    }
}
