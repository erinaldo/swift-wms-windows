'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8825
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8825.
'
Namespace WMS_Trans
    
    '''<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WMS_TransSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WMS_Trans
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = AppSettings.ServerUrl + "/Trans/WMS_Trans.asmx"
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterOccupancy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterOccupancy(ByVal pSOURCE_LOCATION As String, ByVal pLOGIN_ID As String, ByVal pOCCUPANCY_LEVEL As Double, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("RegisterOccupancy", New Object() {pSOURCE_LOCATION, pLOGIN_ID, pOCCUPANCY_LEVEL, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterOccupancy(ByVal pSOURCE_LOCATION As String, ByVal pLOGIN_ID As String, ByVal pOCCUPANCY_LEVEL As Double, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterOccupancy", New Object() {pSOURCE_LOCATION, pLOGIN_ID, pOCCUPANCY_LEVEL, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterOccupancy(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetReceptionAuditSummary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetReceptionAuditSummary(ByVal pCODIGO_POLIZA As String, ByVal pQTY1 As Double, ByVal pQTY2 As Double, ByVal pQTY3 As Double, ByVal pQTY4 As Double, ByVal pLOGIN_ID As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("SetReceptionAuditSummary", New Object() {pCODIGO_POLIZA, pQTY1, pQTY2, pQTY3, pQTY4, pLOGIN_ID, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetReceptionAuditSummary(ByVal pCODIGO_POLIZA As String, ByVal pQTY1 As Double, ByVal pQTY2 As Double, ByVal pQTY3 As Double, ByVal pQTY4 As Double, ByVal pLOGIN_ID As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetReceptionAuditSummary", New Object() {pCODIGO_POLIZA, pQTY1, pQTY2, pQTY3, pQTY4, pLOGIN_ID, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetReceptionAuditSummary(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTransWeigth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetTransWeigth(ByVal pSERIAL_NUMBER As Integer, ByVal pWEIGTH As Double, ByVal pLOGIN_ID As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("SetTransWeigth", New Object() {pSERIAL_NUMBER, pWEIGTH, pLOGIN_ID, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetTransWeigth(ByVal pSERIAL_NUMBER As Integer, ByVal pWEIGTH As Double, ByVal pLOGIN_ID As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetTransWeigth", New Object() {pSERIAL_NUMBER, pWEIGTH, pLOGIN_ID, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetTransWeigth(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditCount(ByVal pAUDIT_ID As Integer, ByVal pMETHOD As String, ByVal pCODIGO_POLIZA As String, ByVal pBARCODE_ID As String, ByVal pQTY_INPUTED As Integer, ByVal pSERIAL_ID As String, ByVal pLOGIN_ID As String, ByVal pOPTION As String, ByVal pBatch As String, ByVal pDateExpirtacion As Date, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("AuditCount", New Object() {pAUDIT_ID, pMETHOD, pCODIGO_POLIZA, pBARCODE_ID, pQTY_INPUTED, pSERIAL_ID, pLOGIN_ID, pOPTION, pBatch, pDateExpirtacion, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAuditCount(ByVal pAUDIT_ID As Integer, ByVal pMETHOD As String, ByVal pCODIGO_POLIZA As String, ByVal pBARCODE_ID As String, ByVal pQTY_INPUTED As Integer, ByVal pSERIAL_ID As String, ByVal pLOGIN_ID As String, ByVal pOPTION As String, ByVal pBatch As String, ByVal pDateExpirtacion As Date, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuditCount", New Object() {pAUDIT_ID, pMETHOD, pCODIGO_POLIZA, pBARCODE_ID, pQTY_INPUTED, pSERIAL_ID, pLOGIN_ID, pOPTION, pBatch, pDateExpirtacion, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuditCount(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditStartCounting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditStartCounting(ByVal pLOGIN_ID As String, ByVal pCODIGO_POLIZA As String, ByVal pCONTENEDOR As String, ByVal pMETHOD As String, ByRef pCREATED_AUDIT_ID As Integer, ByVal pOPTION As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("AuditStartCounting", New Object() {pLOGIN_ID, pCODIGO_POLIZA, pCONTENEDOR, pMETHOD, pCREATED_AUDIT_ID, pOPTION, pResult, pEnvironmentName})
            pCREATED_AUDIT_ID = CType(results(1),Integer)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAuditStartCounting(ByVal pLOGIN_ID As String, ByVal pCODIGO_POLIZA As String, ByVal pCONTENEDOR As String, ByVal pMETHOD As String, ByVal pCREATED_AUDIT_ID As Integer, ByVal pOPTION As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuditStartCounting", New Object() {pLOGIN_ID, pCODIGO_POLIZA, pCONTENEDOR, pMETHOD, pCREATED_AUDIT_ID, pOPTION, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuditStartCounting(ByVal asyncResult As System.IAsyncResult, ByRef pCREATED_AUDIT_ID As Integer, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pCREATED_AUDIT_ID = CType(results(1),Integer)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditFinishCounting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditFinishCounting(ByVal pAUDIT_ID As Integer, ByVal pLOGIN_ID As String, ByVal pOPTION As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("AuditFinishCounting", New Object() {pAUDIT_ID, pLOGIN_ID, pOPTION, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAuditFinishCounting(ByVal pAUDIT_ID As Integer, ByVal pLOGIN_ID As String, ByVal pOPTION As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuditFinishCounting", New Object() {pAUDIT_ID, pLOGIN_ID, pOPTION, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuditFinishCounting(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LicenseReAlloc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LicenseReAlloc(ByVal pLICENSE_ID As Integer, ByVal pNEW_LOCATION As String, ByVal pLOGIN_ID As String, ByVal pMt2 As Decimal, ByRef pResult As String, ByVal pEnvironmentName As String, ByVal paramName As String) As Boolean
            Dim results() As Object = Me.Invoke("LicenseReAlloc", New Object() {pLICENSE_ID, pNEW_LOCATION, pLOGIN_ID, pMt2, pResult, pEnvironmentName, paramName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginLicenseReAlloc(ByVal pLICENSE_ID As Integer, ByVal pNEW_LOCATION As String, ByVal pLOGIN_ID As String, ByVal pMt2 As Decimal, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal paramName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LicenseReAlloc", New Object() {pLICENSE_ID, pNEW_LOCATION, pLOGIN_ID, pMt2, pResult, pEnvironmentName, paramName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLicenseReAlloc(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditResetCounting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuditResetCounting(ByVal pAUDIT_ID As Integer, ByVal pBARCODE_ID As String, ByVal pOPTION As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("AuditResetCounting", New Object() {pAUDIT_ID, pBARCODE_ID, pOPTION, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAuditResetCounting(ByVal pAUDIT_ID As Integer, ByVal pBARCODE_ID As String, ByVal pOPTION As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuditResetCounting", New Object() {pAUDIT_ID, pBARCODE_ID, pOPTION, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuditResetCounting(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AllocLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocLicense(ByVal pLicenseID As Integer, ByVal pTargetLocation As String, ByVal pLoginID As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("AllocLicense", New Object() {pLicenseID, pTargetLocation, pLoginID, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAllocLicense(ByVal pLicenseID As Integer, ByVal pTargetLocation As String, ByVal pLoginID As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AllocLicense", New Object() {pLicenseID, pTargetLocation, pLoginID, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAllocLicense(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTrans", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterTrans( _
                    ByVal pTRADE_AGREEMENT As String,  _
                    ByVal pLOGIN_ID As String,  _
                    ByVal pTRANS_TYPE As String,  _
                    ByVal pTRANS_EXTRA_COMMENTS As String,  _
                    ByVal pMATERIAL_BARCODE As String,  _
                    ByVal pMATERIAL_ID As String,  _
                    ByVal pSOURCE_LICENSE As Integer,  _
                    ByVal pTARGET_LICENSE As Integer,  _
                    ByVal pSOURCE_LOCATION As String,  _
                    ByVal pTARGET_LOCATION As String,  _
                    ByVal pCLIENT_OWNER As String,  _
                    ByVal pQUANTITY_UNITS As Double,  _
                    ByVal pSOURCE_WAREHOUSE As String,  _
                    ByVal pTARGET_WAREHOUSE As String,  _
                    ByVal pTRANS_SUBTYPE As String,  _
                    ByRef pCODIGO_POLIZA As String,  _
                    ByVal pLICENSE_ID As Integer,  _
                    ByVal pSTATUS As String,  _
                    ByVal pWAVE_PICKING_ID As Integer,  _
                    ByVal pSERIAL_NUMBER As Integer,  _
                    ByVal pTransMT2 As Decimal,  _
                    ByVal pTipoUbicacion As String,  _
                    ByVal pMt2 As Decimal,  _
                    ByVal pVin As String,  _
                    ByVal pTask_Id As String,  _
                    ByVal pSerial As String,  _
                    ByVal pLote As String,  _
                    ByVal pFechaLote As Date,  _
                    ByRef pResult As String,  _
                    ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("RegisterTrans", New Object() {pTRADE_AGREEMENT, pLOGIN_ID, pTRANS_TYPE, pTRANS_EXTRA_COMMENTS, pMATERIAL_BARCODE, pMATERIAL_ID, pSOURCE_LICENSE, pTARGET_LICENSE, pSOURCE_LOCATION, pTARGET_LOCATION, pCLIENT_OWNER, pQUANTITY_UNITS, pSOURCE_WAREHOUSE, pTARGET_WAREHOUSE, pTRANS_SUBTYPE, pCODIGO_POLIZA, pLICENSE_ID, pSTATUS, pWAVE_PICKING_ID, pSERIAL_NUMBER, pTransMT2, pTipoUbicacion, pMt2, pVin, pTask_Id, pSerial, pLote, pFechaLote, pResult, pEnvironmentName})
            pCODIGO_POLIZA = CType(results(1),String)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterTrans( _
                    ByVal pTRADE_AGREEMENT As String,  _
                    ByVal pLOGIN_ID As String,  _
                    ByVal pTRANS_TYPE As String,  _
                    ByVal pTRANS_EXTRA_COMMENTS As String,  _
                    ByVal pMATERIAL_BARCODE As String,  _
                    ByVal pMATERIAL_ID As String,  _
                    ByVal pSOURCE_LICENSE As Integer,  _
                    ByVal pTARGET_LICENSE As Integer,  _
                    ByVal pSOURCE_LOCATION As String,  _
                    ByVal pTARGET_LOCATION As String,  _
                    ByVal pCLIENT_OWNER As String,  _
                    ByVal pQUANTITY_UNITS As Double,  _
                    ByVal pSOURCE_WAREHOUSE As String,  _
                    ByVal pTARGET_WAREHOUSE As String,  _
                    ByVal pTRANS_SUBTYPE As String,  _
                    ByVal pCODIGO_POLIZA As String,  _
                    ByVal pLICENSE_ID As Integer,  _
                    ByVal pSTATUS As String,  _
                    ByVal pWAVE_PICKING_ID As Integer,  _
                    ByVal pSERIAL_NUMBER As Integer,  _
                    ByVal pTransMT2 As Decimal,  _
                    ByVal pTipoUbicacion As String,  _
                    ByVal pMt2 As Decimal,  _
                    ByVal pVin As String,  _
                    ByVal pTask_Id As String,  _
                    ByVal pSerial As String,  _
                    ByVal pLote As String,  _
                    ByVal pFechaLote As Date,  _
                    ByVal pResult As String,  _
                    ByVal pEnvironmentName As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterTrans", New Object() {pTRADE_AGREEMENT, pLOGIN_ID, pTRANS_TYPE, pTRANS_EXTRA_COMMENTS, pMATERIAL_BARCODE, pMATERIAL_ID, pSOURCE_LICENSE, pTARGET_LICENSE, pSOURCE_LOCATION, pTARGET_LOCATION, pCLIENT_OWNER, pQUANTITY_UNITS, pSOURCE_WAREHOUSE, pTARGET_WAREHOUSE, pTRANS_SUBTYPE, pCODIGO_POLIZA, pLICENSE_ID, pSTATUS, pWAVE_PICKING_ID, pSERIAL_NUMBER, pTransMT2, pTipoUbicacion, pMt2, pVin, pTask_Id, pSerial, pLote, pFechaLote, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterTrans(ByVal asyncResult As System.IAsyncResult, ByRef pCODIGO_POLIZA As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pCODIGO_POLIZA = CType(results(1),String)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTypeChangeXLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateTypeChangeXLicense(ByVal pLicenseID As Integer, ByVal pTypeCharge As Integer, ByVal pQty As Integer, ByVal pLastUpdatedBy As String, ByVal pTypeTrans As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateTypeChangeXLicense", New Object() {pLicenseID, pTypeCharge, pQty, pLastUpdatedBy, pTypeTrans, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateTypeChangeXLicense(ByVal pLicenseID As Integer, ByVal pTypeCharge As Integer, ByVal pQty As Integer, ByVal pLastUpdatedBy As String, ByVal pTypeTrans As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateTypeChangeXLicense", New Object() {pLicenseID, pTypeCharge, pQty, pLastUpdatedBy, pTypeTrans, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateTypeChangeXLicense(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStatusQuotaLetter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStatusQuotaLetter(ByVal pDocId As Integer, ByVal pStatus As String, ByVal pUserId As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateStatusQuotaLetter", New Object() {pDocId, pStatus, pUserId, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateStatusQuotaLetter(ByVal pDocId As Integer, ByVal pStatus As String, ByVal pUserId As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateStatusQuotaLetter", New Object() {pDocId, pStatus, pUserId, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateStatusQuotaLetter(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAcuseRecibo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAcuseRecibo(ByVal pPoliza As String, ByVal pFob As String, ByVal pDate As Date, ByVal pCodigoTransportista As String, ByVal pPlacaTransportista As String, ByVal pNumeroContenedor As String, ByVal pNumeroMarchamo As String, ByVal pUserId As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pFoto1() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pFoto2() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pFoto3() As Byte, ByVal pStatus As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateAcuseRecibo", New Object() {pPoliza, pFob, pDate, pCodigoTransportista, pPlacaTransportista, pNumeroContenedor, pNumeroMarchamo, pUserId, pFoto1, pFoto2, pFoto3, pStatus, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateAcuseRecibo( _
                    ByVal pPoliza As String,  _
                    ByVal pFob As String,  _
                    ByVal pDate As Date,  _
                    ByVal pCodigoTransportista As String,  _
                    ByVal pPlacaTransportista As String,  _
                    ByVal pNumeroContenedor As String,  _
                    ByVal pNumeroMarchamo As String,  _
                    ByVal pUserId As String,  _
                    ByVal pFoto1() As Byte,  _
                    ByVal pFoto2() As Byte,  _
                    ByVal pFoto3() As Byte,  _
                    ByVal pStatus As String,  _
                    ByVal pResult As String,  _
                    ByVal pEnvironmentName As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateAcuseRecibo", New Object() {pPoliza, pFob, pDate, pCodigoTransportista, pPlacaTransportista, pNumeroContenedor, pNumeroMarchamo, pUserId, pFoto1, pFoto2, pFoto3, pStatus, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateAcuseRecibo(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStatusSapService", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStatusSapService(ByVal pDocId As Integer, ByVal pStatus As String, ByRef pResult As String, ByVal pEnvironmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateStatusSapService", New Object() {pDocId, pStatus, pResult, pEnvironmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateStatusSapService(ByVal pDocId As Integer, ByVal pStatus As String, ByVal pResult As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateStatusSapService", New Object() {pDocId, pStatus, pResult, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateStatusSapService(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActualizarEstadoTareaDeRecepcion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActualizarEstadoTareaDeRecepcion(ByVal CodigoPoliza As String, ByVal LogIn As String, ByVal Regimen As String, ByVal Estatus As String, ByVal TaskId As Integer, ByVal pEnvironmentName As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("ActualizarEstadoTareaDeRecepcion", New Object() {CodigoPoliza, LogIn, Regimen, Estatus, TaskId, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginActualizarEstadoTareaDeRecepcion(ByVal CodigoPoliza As String, ByVal LogIn As String, ByVal Regimen As String, ByVal Estatus As String, ByVal TaskId As Integer, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizarEstadoTareaDeRecepcion", New Object() {CodigoPoliza, LogIn, Regimen, Estatus, TaskId, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndActualizarEstadoTareaDeRecepcion(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RollBackALicencia", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RollBackALicencia(ByVal LicenceId As Integer, ByVal pEnvironmentName As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("RollBackALicencia", New Object() {LicenceId, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRollBackALicencia(ByVal LicenceId As Integer, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RollBackALicencia", New Object() {LicenceId, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRollBackALicencia(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExplodeMasterPack", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExplodeMasterPack(ByVal LicenceId As Integer, ByVal MaterialId As String, ByVal LastUpdateBy As String, ByVal pEnvironmentName As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("ExplodeMasterPack", New Object() {LicenceId, MaterialId, LastUpdateBy, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginExplodeMasterPack(ByVal LicenceId As Integer, ByVal MaterialId As String, ByVal LastUpdateBy As String, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExplodeMasterPack", New Object() {LicenceId, MaterialId, LastUpdateBy, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndExplodeMasterPack(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterPackByLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterPackByLicense(ByVal licenceId As Integer, ByVal MaterialId As String, ByVal pEnvironmentName As String, ByRef pResult As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterPackByLicense", New Object() {licenceId, MaterialId, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMasterPackByLicense(ByVal licenceId As Integer, ByVal MaterialId As String, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMasterPackByLicense", New Object() {licenceId, MaterialId, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMasterPackByLicense(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDetailMasterPackByLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDetailMasterPackByLicense(ByVal licenceId As Integer, ByVal materialId As String, ByVal pEnvironmentName As String, ByRef pResult As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDetailMasterPackByLicense", New Object() {licenceId, materialId, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDetailMasterPackByLicense(ByVal licenceId As Integer, ByVal materialId As String, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDetailMasterPackByLicense", New Object() {licenceId, materialId, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDetailMasterPackByLicense(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLocationTargerTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLocationTargerTask(ByVal wevePickingId As Integer, ByVal login As String, ByVal locationSpotTarget As String, ByVal pEnvironmentName As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLocationTargerTask", New Object() {wevePickingId, login, locationSpotTarget, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLocationTargerTask(ByVal wevePickingId As Integer, ByVal login As String, ByVal locationSpotTarget As String, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLocationTargerTask", New Object() {wevePickingId, login, locationSpotTarget, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLocationTargerTask(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelPickingDetailLine", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelPickingDetailLine(ByVal wavePickingId As Integer, ByVal login As String, ByVal materialId As String, ByVal pEnvironmentName As String, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("CancelPickingDetailLine", New Object() {wavePickingId, login, materialId, pEnvironmentName, pResult})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelPickingDetailLine(ByVal wavePickingId As Integer, ByVal login As String, ByVal materialId As String, ByVal pEnvironmentName As String, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelPickingDetailLine", New Object() {wavePickingId, login, materialId, pEnvironmentName, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelPickingDetailLine(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTransReallocForReplenishment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterTransReallocForReplenishment(ByVal login As String, ByVal materialId As String, ByVal materialBarcode As String, ByVal sourceLicence As Integer, ByVal sourceLocation As String, ByVal qty As Decimal, ByVal wavePickingId As Integer, ByVal mt2 As Decimal, ByVal typeLocation As String, ByVal targetLocation As String, ByVal pEnvironmentName As String, ByRef newLiceceId As Integer, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.Invoke("RegisterTransReallocForReplenishment", New Object() {login, materialId, materialBarcode, sourceLicence, sourceLocation, qty, wavePickingId, mt2, typeLocation, targetLocation, pEnvironmentName, newLiceceId, pResult})
            newLiceceId = CType(results(1),Integer)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterTransReallocForReplenishment(ByVal login As String, ByVal materialId As String, ByVal materialBarcode As String, ByVal sourceLicence As Integer, ByVal sourceLocation As String, ByVal qty As Decimal, ByVal wavePickingId As Integer, ByVal mt2 As Decimal, ByVal typeLocation As String, ByVal targetLocation As String, ByVal pEnvironmentName As String, ByVal newLiceceId As Integer, ByVal pResult As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterTransReallocForReplenishment", New Object() {login, materialId, materialBarcode, sourceLicence, sourceLocation, qty, wavePickingId, mt2, typeLocation, targetLocation, pEnvironmentName, newLiceceId, pResult}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterTransReallocForReplenishment(ByVal asyncResult As System.IAsyncResult, ByRef newLiceceId As Integer, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            newLiceceId = CType(results(1),Integer)
            pResult = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTransRelocateForNoImmediatePicking", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterTransRelocateForNoImmediatePicking(ByVal login As String, ByVal materialId As String, ByVal materialBarcode As String, ByVal sourceLicence As Integer, ByVal sourceLocation As String, ByVal qty As Decimal, ByVal wavePickingId As Integer, ByVal mt2 As Decimal, ByVal typeLocation As String, ByVal targetLocation As String, ByVal environmentName As String, ByRef newLicenseId As Integer, ByRef result As String) As Boolean
            Dim results() As Object = Me.Invoke("RegisterTransRelocateForNoImmediatePicking", New Object() {login, materialId, materialBarcode, sourceLicence, sourceLocation, qty, wavePickingId, mt2, typeLocation, targetLocation, environmentName, newLicenseId, result})
            newLicenseId = CType(results(1),Integer)
            result = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterTransRelocateForNoImmediatePicking(ByVal login As String, ByVal materialId As String, ByVal materialBarcode As String, ByVal sourceLicence As Integer, ByVal sourceLocation As String, ByVal qty As Decimal, ByVal wavePickingId As Integer, ByVal mt2 As Decimal, ByVal typeLocation As String, ByVal targetLocation As String, ByVal environmentName As String, ByVal newLicenseId As Integer, ByVal result As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterTransRelocateForNoImmediatePicking", New Object() {login, materialId, materialBarcode, sourceLicence, sourceLocation, qty, wavePickingId, mt2, typeLocation, targetLocation, environmentName, newLicenseId, result}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterTransRelocateForNoImmediatePicking(ByVal asyncResult As System.IAsyncResult, ByRef newLicenseId As Integer, ByRef result As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            newLicenseId = CType(results(1),Integer)
            result = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScannedSerialNumberToProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateScannedSerialNumberToProcess(ByVal serialNumber As String, ByVal licenseId As Integer, ByVal wavePickingId As Integer, ByVal materialId As String, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("UpdateScannedSerialNumberToProcess", New Object() {serialNumber, licenseId, wavePickingId, materialId, login, taskType, environmentName, result})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateScannedSerialNumberToProcess(ByVal serialNumber As String, ByVal licenseId As Integer, ByVal wavePickingId As Integer, ByVal materialId As String, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByVal result As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateScannedSerialNumberToProcess", New Object() {serialNumber, licenseId, wavePickingId, materialId, login, taskType, environmentName, result}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateScannedSerialNumberToProcess(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSetActiveSerialNumber", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSetActiveSerialNumber(ByVal serialNumber As String, ByVal licenseId As Integer, ByVal materialId As String, ByVal wavePickingId As Integer, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("UpdateSetActiveSerialNumber", New Object() {serialNumber, licenseId, materialId, wavePickingId, login, taskType, environmentName, result})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateSetActiveSerialNumber(ByVal serialNumber As String, ByVal licenseId As Integer, ByVal materialId As String, ByVal wavePickingId As Integer, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByVal result As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateSetActiveSerialNumber", New Object() {serialNumber, licenseId, materialId, wavePickingId, login, taskType, environmentName, result}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateSetActiveSerialNumber(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedSerialNumberDiscretionalPickingByLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequestedSerialNumberDiscretionalPickingByLicense(ByVal wavePickingId As Integer, ByVal licenseId As Integer, ByVal materialId As String, ByVal environmentName As String, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetRequestedSerialNumberDiscretionalPickingByLicense", New Object() {wavePickingId, licenseId, materialId, environmentName, result})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRequestedSerialNumberDiscretionalPickingByLicense(ByVal wavePickingId As Integer, ByVal licenseId As Integer, ByVal materialId As String, ByVal environmentName As String, ByVal result As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRequestedSerialNumberDiscretionalPickingByLicense", New Object() {wavePickingId, licenseId, materialId, environmentName, result}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRequestedSerialNumberDiscretionalPickingByLicense(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RollbackSerialNumbersOnProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RollbackSerialNumbersOnProcess(ByVal wavePickingId As Integer, ByVal licenseId As Integer, ByVal materialId As String, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("RollbackSerialNumbersOnProcess", New Object() {wavePickingId, licenseId, materialId, login, taskType, environmentName, result})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginRollbackSerialNumbersOnProcess(ByVal wavePickingId As Integer, ByVal licenseId As Integer, ByVal materialId As String, ByVal login As String, ByVal taskType As String, ByVal environmentName As String, ByVal result As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RollbackSerialNumbersOnProcess", New Object() {wavePickingId, licenseId, materialId, login, taskType, environmentName, result}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRollbackSerialNumbersOnProcess(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateScannedReceptionDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateScannedReceptionDocument(ByVal document As String, ByVal login As String, ByRef pResult As String, ByVal environmentName As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidateScannedReceptionDocument", New Object() {document, login, pResult, environmentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginValidateScannedReceptionDocument(ByVal document As String, ByVal login As String, ByVal pResult As String, ByVal environmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidateScannedReceptionDocument", New Object() {document, login, pResult, environmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidateScannedReceptionDocument(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessScannedDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessScannedDocument(ByVal type As String, ByVal document As String, ByVal login As String, ByRef pResult As String, ByVal enviromentName As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessScannedDocument", New Object() {type, document, login, pResult, enviromentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginProcessScannedDocument(ByVal type As String, ByVal document As String, ByVal login As String, ByVal pResult As String, ByVal enviromentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ProcessScannedDocument", New Object() {type, document, login, pResult, enviromentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndProcessScannedDocument(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPickingLabel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertPickingLabel(ByVal loginId As String, ByVal wavePickingId As Integer, ByVal clientCode As String, ByRef pResult As String, ByVal enviromentName As String) As String
            Dim results() As Object = Me.Invoke("InsertPickingLabel", New Object() {loginId, wavePickingId, clientCode, pResult, enviromentName})
            pResult = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginInsertPickingLabel(ByVal loginId As String, ByVal wavePickingId As Integer, ByVal clientCode As String, ByVal pResult As String, ByVal enviromentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InsertPickingLabel", New Object() {loginId, wavePickingId, clientCode, pResult, enviromentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndInsertPickingLabel(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePickingLabel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePickingLabel(ByVal labelId As Integer, ByVal clientCode As String, ByVal licenseId As Integer, ByVal barcode As String, ByVal qty As Decimal, ByVal codigoPoliza As String, ByVal sourceLocation As String, ByVal targetLocation As String, ByVal transitLocation As String, ByVal serialNumber As String, ByVal wavePicking As Integer, ByRef pResult As String, ByVal enviromentName As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdatePickingLabel", New Object() {labelId, clientCode, licenseId, barcode, qty, codigoPoliza, sourceLocation, targetLocation, transitLocation, serialNumber, wavePicking, pResult, enviromentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatePickingLabel(ByVal labelId As Integer, ByVal clientCode As String, ByVal licenseId As Integer, ByVal barcode As String, ByVal qty As Decimal, ByVal codigoPoliza As String, ByVal sourceLocation As String, ByVal targetLocation As String, ByVal transitLocation As String, ByVal serialNumber As String, ByVal wavePicking As Integer, ByVal pResult As String, ByVal enviromentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatePickingLabel", New Object() {labelId, clientCode, licenseId, barcode, qty, codigoPoliza, sourceLocation, targetLocation, transitLocation, serialNumber, wavePicking, pResult, enviromentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatePickingLabel(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePickingLabel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePickingLabel(ByVal labelId As Integer, ByRef pResult As String, ByVal enviromentName As String) As Boolean
            Dim results() As Object = Me.Invoke("DeletePickingLabel", New Object() {labelId, pResult, enviromentName})
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginDeletePickingLabel(ByVal labelId As Integer, ByVal pResult As String, ByVal enviromentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeletePickingLabel", New Object() {labelId, pResult, enviromentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeletePickingLabel(ByVal asyncResult As System.IAsyncResult, ByRef pResult As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pResult = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateIfPickingLicenseIsAvailable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateIfPickingLicenseIsAvailable(ByVal wavePickingId As Integer, ByVal currentLocation As String, ByVal materialId As String, ByVal licenseId As Integer, ByVal login As String, ByRef result As String, ByVal pEnvironmentName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("ValidateIfPickingLicenseIsAvailable", New Object() {wavePickingId, currentLocation, materialId, licenseId, login, result, pEnvironmentName})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginValidateIfPickingLicenseIsAvailable(ByVal wavePickingId As Integer, ByVal currentLocation As String, ByVal materialId As String, ByVal licenseId As Integer, ByVal login As String, ByVal result As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValidateIfPickingLicenseIsAvailable", New Object() {wavePickingId, currentLocation, materialId, licenseId, login, result, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndValidateIfPickingLicenseIsAvailable(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerMaterialesEnUnbicacionParaUnificar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerMaterialesEnUnbicacionParaUnificar(ByVal currentLocation As String, ByVal materialId As String, ByRef result As String, ByVal pEnvironmentName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtenerMaterialesEnUnbicacionParaUnificar", New Object() {currentLocation, materialId, result, pEnvironmentName})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginObtenerMaterialesEnUnbicacionParaUnificar(ByVal currentLocation As String, ByVal materialId As String, ByVal result As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtenerMaterialesEnUnbicacionParaUnificar", New Object() {currentLocation, materialId, result, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndObtenerMaterialesEnUnbicacionParaUnificar(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnificarLicenciasPorUbicacionYMaterial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnificarLicenciasPorUbicacionYMaterial(ByVal currentLocation As String, ByVal materialId As String, ByVal login As String, ByRef result As String, ByVal pEnvironmentName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UnificarLicenciasPorUbicacionYMaterial", New Object() {currentLocation, materialId, login, result, pEnvironmentName})
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUnificarLicenciasPorUbicacionYMaterial(ByVal currentLocation As String, ByVal materialId As String, ByVal login As String, ByVal result As String, ByVal pEnvironmentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UnificarLicenciasPorUbicacionYMaterial", New Object() {currentLocation, materialId, login, result, pEnvironmentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUnificarLicenciasPorUbicacionYMaterial(ByVal asyncResult As System.IAsyncResult, ByRef result As String) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
    End Class
End Namespace
