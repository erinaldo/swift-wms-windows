//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8745
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8745.
// 
namespace MobilityScm.Modelo.Vistas.Operaciones.WMS_Trans {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WMS_TransSoap", Namespace="http://tempuri.org/")]
    public partial class WMS_Trans : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public WMS_Trans() {
            this.Url = "http://localhost:8088/WMSOnePlan_BusinessServices/Trans/WMS_Trans.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterOccupancy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterOccupancy(string pSOURCE_LOCATION, string pLOGIN_ID, double pOCCUPANCY_LEVEL, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("RegisterOccupancy", new object[] {
                        pSOURCE_LOCATION,
                        pLOGIN_ID,
                        pOCCUPANCY_LEVEL,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterOccupancy(string pSOURCE_LOCATION, string pLOGIN_ID, double pOCCUPANCY_LEVEL, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterOccupancy", new object[] {
                        pSOURCE_LOCATION,
                        pLOGIN_ID,
                        pOCCUPANCY_LEVEL,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRegisterOccupancy(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetReceptionAuditSummary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetReceptionAuditSummary(string pCODIGO_POLIZA, double pQTY1, double pQTY2, double pQTY3, double pQTY4, string pLOGIN_ID, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("SetReceptionAuditSummary", new object[] {
                        pCODIGO_POLIZA,
                        pQTY1,
                        pQTY2,
                        pQTY3,
                        pQTY4,
                        pLOGIN_ID,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetReceptionAuditSummary(string pCODIGO_POLIZA, double pQTY1, double pQTY2, double pQTY3, double pQTY4, string pLOGIN_ID, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetReceptionAuditSummary", new object[] {
                        pCODIGO_POLIZA,
                        pQTY1,
                        pQTY2,
                        pQTY3,
                        pQTY4,
                        pLOGIN_ID,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetReceptionAuditSummary(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTransWeigth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTransWeigth(int pSERIAL_NUMBER, double pWEIGTH, string pLOGIN_ID, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("SetTransWeigth", new object[] {
                        pSERIAL_NUMBER,
                        pWEIGTH,
                        pLOGIN_ID,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetTransWeigth(int pSERIAL_NUMBER, double pWEIGTH, string pLOGIN_ID, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetTransWeigth", new object[] {
                        pSERIAL_NUMBER,
                        pWEIGTH,
                        pLOGIN_ID,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetTransWeigth(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuditCount(int pAUDIT_ID, string pMETHOD, string pCODIGO_POLIZA, string pBARCODE_ID, int pQTY_INPUTED, string pSERIAL_ID, string pLOGIN_ID, string pOPTION, string pBatch, System.DateTime pDateExpirtacion, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("AuditCount", new object[] {
                        pAUDIT_ID,
                        pMETHOD,
                        pCODIGO_POLIZA,
                        pBARCODE_ID,
                        pQTY_INPUTED,
                        pSERIAL_ID,
                        pLOGIN_ID,
                        pOPTION,
                        pBatch,
                        pDateExpirtacion,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditCount(int pAUDIT_ID, string pMETHOD, string pCODIGO_POLIZA, string pBARCODE_ID, int pQTY_INPUTED, string pSERIAL_ID, string pLOGIN_ID, string pOPTION, string pBatch, System.DateTime pDateExpirtacion, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditCount", new object[] {
                        pAUDIT_ID,
                        pMETHOD,
                        pCODIGO_POLIZA,
                        pBARCODE_ID,
                        pQTY_INPUTED,
                        pSERIAL_ID,
                        pLOGIN_ID,
                        pOPTION,
                        pBatch,
                        pDateExpirtacion,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuditCount(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditStartCounting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuditStartCounting(string pLOGIN_ID, string pCODIGO_POLIZA, string pCONTENEDOR, string pMETHOD, ref int pCREATED_AUDIT_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("AuditStartCounting", new object[] {
                        pLOGIN_ID,
                        pCODIGO_POLIZA,
                        pCONTENEDOR,
                        pMETHOD,
                        pCREATED_AUDIT_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName});
            pCREATED_AUDIT_ID = ((int)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditStartCounting(string pLOGIN_ID, string pCODIGO_POLIZA, string pCONTENEDOR, string pMETHOD, int pCREATED_AUDIT_ID, string pOPTION, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditStartCounting", new object[] {
                        pLOGIN_ID,
                        pCODIGO_POLIZA,
                        pCONTENEDOR,
                        pMETHOD,
                        pCREATED_AUDIT_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuditStartCounting(System.IAsyncResult asyncResult, out int pCREATED_AUDIT_ID, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pCREATED_AUDIT_ID = ((int)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditFinishCounting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuditFinishCounting(int pAUDIT_ID, string pLOGIN_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("AuditFinishCounting", new object[] {
                        pAUDIT_ID,
                        pLOGIN_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditFinishCounting(int pAUDIT_ID, string pLOGIN_ID, string pOPTION, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditFinishCounting", new object[] {
                        pAUDIT_ID,
                        pLOGIN_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuditFinishCounting(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LicenseReAlloc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LicenseReAlloc(int pLICENSE_ID, string pNEW_LOCATION, string pLOGIN_ID, decimal pMt2, ref string pResult, string pEnvironmentName, string paramName) {
            object[] results = this.Invoke("LicenseReAlloc", new object[] {
                        pLICENSE_ID,
                        pNEW_LOCATION,
                        pLOGIN_ID,
                        pMt2,
                        pResult,
                        pEnvironmentName,
                        paramName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLicenseReAlloc(int pLICENSE_ID, string pNEW_LOCATION, string pLOGIN_ID, decimal pMt2, string pResult, string pEnvironmentName, string paramName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LicenseReAlloc", new object[] {
                        pLICENSE_ID,
                        pNEW_LOCATION,
                        pLOGIN_ID,
                        pMt2,
                        pResult,
                        pEnvironmentName,
                        paramName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndLicenseReAlloc(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditResetCounting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuditResetCounting(int pAUDIT_ID, string pBARCODE_ID, string pOPTION, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("AuditResetCounting", new object[] {
                        pAUDIT_ID,
                        pBARCODE_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditResetCounting(int pAUDIT_ID, string pBARCODE_ID, string pOPTION, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditResetCounting", new object[] {
                        pAUDIT_ID,
                        pBARCODE_ID,
                        pOPTION,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuditResetCounting(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AllocLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AllocLicense(int pLicenseID, string pTargetLocation, string pLoginID, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("AllocLicense", new object[] {
                        pLicenseID,
                        pTargetLocation,
                        pLoginID,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllocLicense(int pLicenseID, string pTargetLocation, string pLoginID, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllocLicense", new object[] {
                        pLicenseID,
                        pTargetLocation,
                        pLoginID,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAllocLicense(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterTrans(
                    string pTRADE_AGREEMENT, 
                    string pLOGIN_ID, 
                    string pTRANS_TYPE, 
                    string pTRANS_EXTRA_COMMENTS, 
                    string pMATERIAL_BARCODE, 
                    string pMATERIAL_ID, 
                    int pSOURCE_LICENSE, 
                    int pTARGET_LICENSE, 
                    string pSOURCE_LOCATION, 
                    string pTARGET_LOCATION, 
                    string pCLIENT_OWNER, 
                    double pQUANTITY_UNITS, 
                    string pSOURCE_WAREHOUSE, 
                    string pTARGET_WAREHOUSE, 
                    string pTRANS_SUBTYPE, 
                    ref string pCODIGO_POLIZA, 
                    int pLICENSE_ID, 
                    string pSTATUS, 
                    int pWAVE_PICKING_ID, 
                    int pSERIAL_NUMBER, 
                    decimal pTransMT2, 
                    string pTipoUbicacion, 
                    decimal pMt2, 
                    string pVin, 
                    string pTask_Id, 
                    string pSerial, 
                    string pLote, 
                    System.DateTime pFechaLote, 
                    ref string pResult, 
                    string pEnvironmentName) {
            object[] results = this.Invoke("RegisterTrans", new object[] {
                        pTRADE_AGREEMENT,
                        pLOGIN_ID,
                        pTRANS_TYPE,
                        pTRANS_EXTRA_COMMENTS,
                        pMATERIAL_BARCODE,
                        pMATERIAL_ID,
                        pSOURCE_LICENSE,
                        pTARGET_LICENSE,
                        pSOURCE_LOCATION,
                        pTARGET_LOCATION,
                        pCLIENT_OWNER,
                        pQUANTITY_UNITS,
                        pSOURCE_WAREHOUSE,
                        pTARGET_WAREHOUSE,
                        pTRANS_SUBTYPE,
                        pCODIGO_POLIZA,
                        pLICENSE_ID,
                        pSTATUS,
                        pWAVE_PICKING_ID,
                        pSERIAL_NUMBER,
                        pTransMT2,
                        pTipoUbicacion,
                        pMt2,
                        pVin,
                        pTask_Id,
                        pSerial,
                        pLote,
                        pFechaLote,
                        pResult,
                        pEnvironmentName});
            pCODIGO_POLIZA = ((string)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterTrans(
                    string pTRADE_AGREEMENT, 
                    string pLOGIN_ID, 
                    string pTRANS_TYPE, 
                    string pTRANS_EXTRA_COMMENTS, 
                    string pMATERIAL_BARCODE, 
                    string pMATERIAL_ID, 
                    int pSOURCE_LICENSE, 
                    int pTARGET_LICENSE, 
                    string pSOURCE_LOCATION, 
                    string pTARGET_LOCATION, 
                    string pCLIENT_OWNER, 
                    double pQUANTITY_UNITS, 
                    string pSOURCE_WAREHOUSE, 
                    string pTARGET_WAREHOUSE, 
                    string pTRANS_SUBTYPE, 
                    string pCODIGO_POLIZA, 
                    int pLICENSE_ID, 
                    string pSTATUS, 
                    int pWAVE_PICKING_ID, 
                    int pSERIAL_NUMBER, 
                    decimal pTransMT2, 
                    string pTipoUbicacion, 
                    decimal pMt2, 
                    string pVin, 
                    string pTask_Id, 
                    string pSerial, 
                    string pLote, 
                    System.DateTime pFechaLote, 
                    string pResult, 
                    string pEnvironmentName, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("RegisterTrans", new object[] {
                        pTRADE_AGREEMENT,
                        pLOGIN_ID,
                        pTRANS_TYPE,
                        pTRANS_EXTRA_COMMENTS,
                        pMATERIAL_BARCODE,
                        pMATERIAL_ID,
                        pSOURCE_LICENSE,
                        pTARGET_LICENSE,
                        pSOURCE_LOCATION,
                        pTARGET_LOCATION,
                        pCLIENT_OWNER,
                        pQUANTITY_UNITS,
                        pSOURCE_WAREHOUSE,
                        pTARGET_WAREHOUSE,
                        pTRANS_SUBTYPE,
                        pCODIGO_POLIZA,
                        pLICENSE_ID,
                        pSTATUS,
                        pWAVE_PICKING_ID,
                        pSERIAL_NUMBER,
                        pTransMT2,
                        pTipoUbicacion,
                        pMt2,
                        pVin,
                        pTask_Id,
                        pSerial,
                        pLote,
                        pFechaLote,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRegisterTrans(System.IAsyncResult asyncResult, out string pCODIGO_POLIZA, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pCODIGO_POLIZA = ((string)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTypeChangeXLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateTypeChangeXLicense(int pLicenseID, int pTypeCharge, int pQty, string pLastUpdatedBy, string pTypeTrans, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("CreateTypeChangeXLicense", new object[] {
                        pLicenseID,
                        pTypeCharge,
                        pQty,
                        pLastUpdatedBy,
                        pTypeTrans,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateTypeChangeXLicense(int pLicenseID, int pTypeCharge, int pQty, string pLastUpdatedBy, string pTypeTrans, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateTypeChangeXLicense", new object[] {
                        pLicenseID,
                        pTypeCharge,
                        pQty,
                        pLastUpdatedBy,
                        pTypeTrans,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCreateTypeChangeXLicense(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStatusQuotaLetter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateStatusQuotaLetter(int pDocId, string pStatus, string pUserId, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("UpdateStatusQuotaLetter", new object[] {
                        pDocId,
                        pStatus,
                        pUserId,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStatusQuotaLetter(int pDocId, string pStatus, string pUserId, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStatusQuotaLetter", new object[] {
                        pDocId,
                        pStatus,
                        pUserId,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdateStatusQuotaLetter(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAcuseRecibo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateAcuseRecibo(string pPoliza, string pFob, System.DateTime pDate, string pCodigoTransportista, string pPlacaTransportista, string pNumeroContenedor, string pNumeroMarchamo, string pUserId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pFoto1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pFoto2, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pFoto3, string pStatus, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("CreateAcuseRecibo", new object[] {
                        pPoliza,
                        pFob,
                        pDate,
                        pCodigoTransportista,
                        pPlacaTransportista,
                        pNumeroContenedor,
                        pNumeroMarchamo,
                        pUserId,
                        pFoto1,
                        pFoto2,
                        pFoto3,
                        pStatus,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAcuseRecibo(
                    string pPoliza, 
                    string pFob, 
                    System.DateTime pDate, 
                    string pCodigoTransportista, 
                    string pPlacaTransportista, 
                    string pNumeroContenedor, 
                    string pNumeroMarchamo, 
                    string pUserId, 
                    byte[] pFoto1, 
                    byte[] pFoto2, 
                    byte[] pFoto3, 
                    string pStatus, 
                    string pResult, 
                    string pEnvironmentName, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("CreateAcuseRecibo", new object[] {
                        pPoliza,
                        pFob,
                        pDate,
                        pCodigoTransportista,
                        pPlacaTransportista,
                        pNumeroContenedor,
                        pNumeroMarchamo,
                        pUserId,
                        pFoto1,
                        pFoto2,
                        pFoto3,
                        pStatus,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCreateAcuseRecibo(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStatusSapService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateStatusSapService(int pDocId, string pStatus, ref string pResult, string pEnvironmentName) {
            object[] results = this.Invoke("UpdateStatusSapService", new object[] {
                        pDocId,
                        pStatus,
                        pResult,
                        pEnvironmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStatusSapService(int pDocId, string pStatus, string pResult, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStatusSapService", new object[] {
                        pDocId,
                        pStatus,
                        pResult,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdateStatusSapService(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActualizarEstadoTareaDeRecepcion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ActualizarEstadoTareaDeRecepcion(string CodigoPoliza, string LogIn, string Regimen, string Estatus, int TaskId, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("ActualizarEstadoTareaDeRecepcion", new object[] {
                        CodigoPoliza,
                        LogIn,
                        Regimen,
                        Estatus,
                        TaskId,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginActualizarEstadoTareaDeRecepcion(string CodigoPoliza, string LogIn, string Regimen, string Estatus, int TaskId, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ActualizarEstadoTareaDeRecepcion", new object[] {
                        CodigoPoliza,
                        LogIn,
                        Regimen,
                        Estatus,
                        TaskId,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndActualizarEstadoTareaDeRecepcion(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RollBackALicencia", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RollBackALicencia(int LicenceId, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("RollBackALicencia", new object[] {
                        LicenceId,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRollBackALicencia(int LicenceId, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RollBackALicencia", new object[] {
                        LicenceId,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRollBackALicencia(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExplodeMasterPack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExplodeMasterPack(int LicenceId, string MaterialId, string LastUpdateBy, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("ExplodeMasterPack", new object[] {
                        LicenceId,
                        MaterialId,
                        LastUpdateBy,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExplodeMasterPack(int LicenceId, string MaterialId, string LastUpdateBy, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExplodeMasterPack", new object[] {
                        LicenceId,
                        MaterialId,
                        LastUpdateBy,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndExplodeMasterPack(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterPackByLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMasterPackByLicense(int licenceId, string MaterialId, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("GetMasterPackByLicense", new object[] {
                        licenceId,
                        MaterialId,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMasterPackByLicense(int licenceId, string MaterialId, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMasterPackByLicense", new object[] {
                        licenceId,
                        MaterialId,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetMasterPackByLicense(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDetailMasterPackByLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDetailMasterPackByLicense(int licenceId, string materialId, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("GetDetailMasterPackByLicense", new object[] {
                        licenceId,
                        materialId,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDetailMasterPackByLicense(int licenceId, string materialId, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDetailMasterPackByLicense", new object[] {
                        licenceId,
                        materialId,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetDetailMasterPackByLicense(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLocationTargerTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateLocationTargerTask(int wevePickingId, string login, string locationSpotTarget, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("UpdateLocationTargerTask", new object[] {
                        wevePickingId,
                        login,
                        locationSpotTarget,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateLocationTargerTask(int wevePickingId, string login, string locationSpotTarget, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateLocationTargerTask", new object[] {
                        wevePickingId,
                        login,
                        locationSpotTarget,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdateLocationTargerTask(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelPickingDetailLine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelPickingDetailLine(int wavePickingId, string login, string materialId, string pEnvironmentName, ref string pResult) {
            object[] results = this.Invoke("CancelPickingDetailLine", new object[] {
                        wavePickingId,
                        login,
                        materialId,
                        pEnvironmentName,
                        pResult});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelPickingDetailLine(int wavePickingId, string login, string materialId, string pEnvironmentName, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelPickingDetailLine", new object[] {
                        wavePickingId,
                        login,
                        materialId,
                        pEnvironmentName,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancelPickingDetailLine(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTransReallocForReplenishment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterTransReallocForReplenishment(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string pEnvironmentName, ref int newLiceceId, ref string pResult) {
            object[] results = this.Invoke("RegisterTransReallocForReplenishment", new object[] {
                        login,
                        materialId,
                        materialBarcode,
                        sourceLicence,
                        sourceLocation,
                        qty,
                        wavePickingId,
                        mt2,
                        typeLocation,
                        targetLocation,
                        pEnvironmentName,
                        newLiceceId,
                        pResult});
            newLiceceId = ((int)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterTransReallocForReplenishment(string login, string materialId, string materialBarcode, int sourceLicence, string sourceLocation, decimal qty, int wavePickingId, decimal mt2, string typeLocation, string targetLocation, string pEnvironmentName, int newLiceceId, string pResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterTransReallocForReplenishment", new object[] {
                        login,
                        materialId,
                        materialBarcode,
                        sourceLicence,
                        sourceLocation,
                        qty,
                        wavePickingId,
                        mt2,
                        typeLocation,
                        targetLocation,
                        pEnvironmentName,
                        newLiceceId,
                        pResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRegisterTransReallocForReplenishment(System.IAsyncResult asyncResult, out int newLiceceId, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            newLiceceId = ((int)(results[1]));
            pResult = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScannedSerialNumberToProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable UpdateScannedSerialNumberToProcess(string serialNumber, int licenseId, int wavePickingId, string materialId, string login, string taskType, string environmentName, ref string result) {
            object[] results = this.Invoke("UpdateScannedSerialNumberToProcess", new object[] {
                        serialNumber,
                        licenseId,
                        wavePickingId,
                        materialId,
                        login,
                        taskType,
                        environmentName,
                        result});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateScannedSerialNumberToProcess(string serialNumber, int licenseId, int wavePickingId, string materialId, string login, string taskType, string environmentName, string result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateScannedSerialNumberToProcess", new object[] {
                        serialNumber,
                        licenseId,
                        wavePickingId,
                        materialId,
                        login,
                        taskType,
                        environmentName,
                        result}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndUpdateScannedSerialNumberToProcess(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSetActiveSerialNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable UpdateSetActiveSerialNumber(string serialNumber, int licenseId, string materialId, int wavePickingId, string login, string taskType, string environmentName, ref string result) {
            object[] results = this.Invoke("UpdateSetActiveSerialNumber", new object[] {
                        serialNumber,
                        licenseId,
                        materialId,
                        wavePickingId,
                        login,
                        taskType,
                        environmentName,
                        result});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSetActiveSerialNumber(string serialNumber, int licenseId, string materialId, int wavePickingId, string login, string taskType, string environmentName, string result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSetActiveSerialNumber", new object[] {
                        serialNumber,
                        licenseId,
                        materialId,
                        wavePickingId,
                        login,
                        taskType,
                        environmentName,
                        result}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndUpdateSetActiveSerialNumber(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedSerialNumberDiscretionalPickingByLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRequestedSerialNumberDiscretionalPickingByLicense(int wavePickingId, int licenseId, string materialId, string environmentName, ref string result) {
            object[] results = this.Invoke("GetRequestedSerialNumberDiscretionalPickingByLicense", new object[] {
                        wavePickingId,
                        licenseId,
                        materialId,
                        environmentName,
                        result});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestedSerialNumberDiscretionalPickingByLicense(int wavePickingId, int licenseId, string materialId, string environmentName, string result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestedSerialNumberDiscretionalPickingByLicense", new object[] {
                        wavePickingId,
                        licenseId,
                        materialId,
                        environmentName,
                        result}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndGetRequestedSerialNumberDiscretionalPickingByLicense(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RollbackSerialNumbersOnProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable RollbackSerialNumbersOnProcess(int wavePickingId, int licenseId, string materialId, string login, string taskType, string environmentName, ref string result) {
            object[] results = this.Invoke("RollbackSerialNumbersOnProcess", new object[] {
                        wavePickingId,
                        licenseId,
                        materialId,
                        login,
                        taskType,
                        environmentName,
                        result});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRollbackSerialNumbersOnProcess(int wavePickingId, int licenseId, string materialId, string login, string taskType, string environmentName, string result, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RollbackSerialNumbersOnProcess", new object[] {
                        wavePickingId,
                        licenseId,
                        materialId,
                        login,
                        taskType,
                        environmentName,
                        result}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndRollbackSerialNumbersOnProcess(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateScannedReceptionDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateScannedReceptionDocument(string document, string login, ref string pResult, string environmentName) {
            object[] results = this.Invoke("ValidateScannedReceptionDocument", new object[] {
                        document,
                        login,
                        pResult,
                        environmentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateScannedReceptionDocument(string document, string login, string pResult, string environmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateScannedReceptionDocument", new object[] {
                        document,
                        login,
                        pResult,
                        environmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndValidateScannedReceptionDocument(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProcessScannedDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcessScannedDocument(string type, string document, string login, ref string pResult, string enviromentName) {
            object[] results = this.Invoke("ProcessScannedDocument", new object[] {
                        type,
                        document,
                        login,
                        pResult,
                        enviromentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProcessScannedDocument(string type, string document, string login, string pResult, string enviromentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ProcessScannedDocument", new object[] {
                        type,
                        document,
                        login,
                        pResult,
                        enviromentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndProcessScannedDocument(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPickingLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPickingLabel(string loginId, int wavePickingId, string clientCode, ref string pResult, string enviromentName) {
            object[] results = this.Invoke("InsertPickingLabel", new object[] {
                        loginId,
                        wavePickingId,
                        clientCode,
                        pResult,
                        enviromentName});
            pResult = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertPickingLabel(string loginId, int wavePickingId, string clientCode, string pResult, string enviromentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertPickingLabel", new object[] {
                        loginId,
                        wavePickingId,
                        clientCode,
                        pResult,
                        enviromentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInsertPickingLabel(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePickingLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePickingLabel(int labelId, string clientCode, int licenseId, string barcode, decimal qty, string codigoPoliza, string sourceLocation, string targetLocation, string transitLocation, string serialNumber, int wavePicking, ref string pResult, string enviromentName) {
            object[] results = this.Invoke("UpdatePickingLabel", new object[] {
                        labelId,
                        clientCode,
                        licenseId,
                        barcode,
                        qty,
                        codigoPoliza,
                        sourceLocation,
                        targetLocation,
                        transitLocation,
                        serialNumber,
                        wavePicking,
                        pResult,
                        enviromentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePickingLabel(int labelId, string clientCode, int licenseId, string barcode, decimal qty, string codigoPoliza, string sourceLocation, string targetLocation, string transitLocation, string serialNumber, int wavePicking, string pResult, string enviromentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePickingLabel", new object[] {
                        labelId,
                        clientCode,
                        licenseId,
                        barcode,
                        qty,
                        codigoPoliza,
                        sourceLocation,
                        targetLocation,
                        transitLocation,
                        serialNumber,
                        wavePicking,
                        pResult,
                        enviromentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdatePickingLabel(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePickingLabel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePickingLabel(int labelId, ref string pResult, string enviromentName) {
            object[] results = this.Invoke("DeletePickingLabel", new object[] {
                        labelId,
                        pResult,
                        enviromentName});
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePickingLabel(int labelId, string pResult, string enviromentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePickingLabel", new object[] {
                        labelId,
                        pResult,
                        enviromentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeletePickingLabel(System.IAsyncResult asyncResult, out string pResult) {
            object[] results = this.EndInvoke(asyncResult);
            pResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateIfPickingLicenseIsAvailable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ValidateIfPickingLicenseIsAvailable(int wavePickingId, string currentLocation, string materialId, int licenseId, string login, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ValidateIfPickingLicenseIsAvailable", new object[] {
                        wavePickingId,
                        currentLocation,
                        materialId,
                        licenseId,
                        login,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateIfPickingLicenseIsAvailable(int wavePickingId, string currentLocation, string materialId, int licenseId, string login, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateIfPickingLicenseIsAvailable", new object[] {
                        wavePickingId,
                        currentLocation,
                        materialId,
                        licenseId,
                        login,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataTable EndValidateIfPickingLicenseIsAvailable(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerMaterialesEnUnbicacionParaUnificar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObtenerMaterialesEnUnbicacionParaUnificar(string currentLocation, string materialId, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("ObtenerMaterialesEnUnbicacionParaUnificar", new object[] {
                        currentLocation,
                        materialId,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginObtenerMaterialesEnUnbicacionParaUnificar(string currentLocation, string materialId, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ObtenerMaterialesEnUnbicacionParaUnificar", new object[] {
                        currentLocation,
                        materialId,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndObtenerMaterialesEnUnbicacionParaUnificar(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnificarLicenciasPorUbicacionYMaterial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnificarLicenciasPorUbicacionYMaterial(string currentLocation, string materialId, string login, ref string result, string pEnvironmentName) {
            object[] results = this.Invoke("UnificarLicenciasPorUbicacionYMaterial", new object[] {
                        currentLocation,
                        materialId,
                        login,
                        result,
                        pEnvironmentName});
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnificarLicenciasPorUbicacionYMaterial(string currentLocation, string materialId, string login, string result, string pEnvironmentName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnificarLicenciasPorUbicacionYMaterial", new object[] {
                        currentLocation,
                        materialId,
                        login,
                        result,
                        pEnvironmentName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndUnificarLicenciasPorUbicacionYMaterial(System.IAsyncResult asyncResult, out string result) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
    }
}
